(this["webpackJsonpscrypt-by-example"]=this["webpackJsonpscrypt-by-example"]||[]).push([[0],{10:function(s,n,a){s.exports={component:"Header_component__1tkkW",logo:"Header_logo__2ins2",light:"Header_light__3PSbv",dark:"Header_dark__2nvtJ",header:"Header_header__3mObx",versions:"Header_versions__eOBao",bar:"Header_bar__23jec",version:"Header_version__1QJXf"}},14:function(s,n,a){s.exports={component:"App_component__1dd61",main:"App_main__3ZkGI",footer:"App_footer__29Fsv"}},17:function(s,n,a){s.exports={component:"Example_component__mzuGC",content:"Example_content__3-AiU"}},32:function(s,n,a){},38:function(s,n,a){"use strict";a.r(n);var e=a(1),t=a(16),l=(a(32),a(12)),c=a(27),p=a(0),i={theme:"light",loading:!0},r=Object(e.createContext)({state:i,setTheme:function(s){},loadLocalStorage:function(){}});function o(){return Object(e.useContext)(r)}var h=function(s){var n=s.children,a=Object(e.useState)(i),t=Object(c.a)(a,2),o=t[0],h=t[1];function d(s){"dark"==s?(document.body.classList.remove("light"),document.body.classList.add("dark")):(document.body.classList.remove("dark"),document.body.classList.add("light"))}function u(){try{var s=localStorage.getItem("theme")||"light";d(s),h((function(n){return Object(l.a)(Object(l.a)({},n),{},{theme:s})}))}catch(n){console.error(n)}h((function(s){return Object(l.a)(Object(l.a)({},s),{},{loading:!1})}))}function j(s){d(s),h(Object(l.a)(Object(l.a)({},o),{},{theme:s})),function(s){try{localStorage.setItem("theme",s)}catch(n){console.error(n)}}(s)}return Object(p.jsx)(r.Provider,{value:Object(e.useMemo)((function(){return{state:o,loadLocalStorage:u,setTheme:j}}),[o]),children:n})},d=a(24),u=a(3),j=a(14),m=a.n(j),b=a(10),y=a.n(b),f=a.p+"static/media/scrypt.dcd88edd.png",g=a.p+"static/media/mode-light.42df9094.svg",x=a.p+"static/media/mode-dark.faf9339e.svg";var _=function(){var s=o(),n=s.state,a=s.setTheme,e=(n.theme,f);function t(s){a(s)}return Object(p.jsxs)("div",{className:y.a.component,children:[Object(p.jsx)("a",{href:"/",children:Object(p.jsx)("img",{src:e,alt:"logo",className:y.a.logo})}),Object(p.jsxs)("h3",{className:y.a.header,children:[Object(p.jsx)("a",{href:"/",children:"sCrypt by Example"}),Object(p.jsx)("div",{className:y.a.versions,children:Object(p.jsx)("div",{className:y.a.version})})]}),"dark"==n.theme?Object(p.jsx)("img",{src:g,alt:"light mode",className:y.a.light,onClick:function(s){return t("light")}}):Object(p.jsx)("img",{src:x,alt:"dark mode",className:y.a.dark,onClick:function(s){return t("dark")}})]})},v=a(5),w=a.n(v),O=a.p+"static/media/telegram.2c6478d9.png",k=a.p+"static/media/github.5994b25b.png",C=a.p+"static/media/slack.8c80a788.png",S=a.p+"static/media/medium.04b8f9d1.png";var N=function(){return Object(p.jsxs)("div",{className:w.a.component,children:[Object(p.jsxs)("div",{className:w.a.row,children:[Object(p.jsx)("img",{src:f,alt:"sCrypt",className:w.a.scrypt}),Object(p.jsx)("a",{href:"https://scrypt.io/",target:"__blank",children:"sCrypt - A high-level language for Bitcoin scripting."})]}),Object(p.jsxs)("div",{className:w.a.social,children:[Object(p.jsxs)("div",{className:w.a.row,children:[Object(p.jsx)("img",{src:k,alt:"github",className:w.a.github}),Object(p.jsx)("a",{href:"https://github.com/sCrypt-Inc",target:"__blank",children:"GitHub"})]}),Object(p.jsxs)("div",{className:w.a.row,children:[Object(p.jsx)("img",{src:S,alt:"medium",className:w.a.medium}),Object(p.jsx)("a",{href:"https://github.com/sCrypt-Inc",target:"__blank",children:"Medium"})]}),Object(p.jsxs)("div",{className:w.a.row,children:[Object(p.jsx)("img",{src:C,alt:"slack",className:w.a.slack}),Object(p.jsx)("a",{href:"https://join.slack.com/t/scryptworkspace/shared_invite/enQtNzQ1OTMyNDk1ODU3LTJmYjE5MGNmNDZhYmYxZWM4ZGY2MTczM2NiNTIxYmFhNTVjNjE5MGYwY2UwNDYxMTQyNGU2NmFkNTY5MmI1MWM",target:"__blank",children:"Slack"})]}),Object(p.jsxs)("div",{className:w.a.row,children:[Object(p.jsx)("img",{src:O,alt:"telegram",className:w.a.telegram}),Object(p.jsx)("a",{href:"https://t.me/joinchat/GwaRAxKT16JjXyHt5PuhHw",target:"__blank",children:"Telegram"})]})]}),Object(p.jsx)("div",{className:w.a.row,children:Object(p.jsx)("a",{href:"mailto:contact@support@scrypt.io",children:"support@scrypt.io"})}),Object(p.jsxs)("div",{className:w.a.row,children:[Object(p.jsx)("a",{href:"https://github.com/sCrypt-Inc/scrypt-by-example.github.io",target:"__blank",children:"source"}),Object(p.jsx)("div",{className:w.a.bar,children:"|"}),Object(p.jsx)("a",{href:"https://github.com/sCrypt-Inc/scrypt-by-example.github.io/blob/gh-pages/LICENSE",target:"__blank",children:"license"})]})]})},T=a(21),P=function(s){var n=s.title,a=s.description;return Object(p.jsxs)(T.a,{children:[Object(p.jsx)("title",{children:n}),Object(p.jsx)("meta",{name:"Description",content:a})]})},A=function(s){var n=s.html;return Object(e.useEffect)((function(){if("ReactSnap"!==navigator.userAgent){document.querySelectorAll("pre").forEach((function(s){var n=document.createElement("div");n.className="buttons";var a=document.createElement("button");a.className="fa fa-copy clip-button",a.title="Copy to clipboard",a.ariaLabel="Copy to clipboard";var e=document.createElement("i");e.className="tooltiptext",a.appendChild(e),n.appendChild(a);var t=s.firstChild;s.insertBefore(n,t),a.addEventListener("click",(function(n){n.preventDefault(),function(s){var n=document.createElement("textarea");n.setAttribute("style","width:1px;border:0;opacity:0;"),document.body.appendChild(n),n.value=s.innerText,n.select(),document.execCommand("copy"),document.body.removeChild(n)}(s.childNodes[1])}))}))}}),[]),Object(p.jsx)("div",{dangerouslySetInnerHTML:{__html:n}})},H=a(17),q=a.n(H),I=function(s){var n=s.title,a=s.version,e=s.description,t=s.html;return Object(p.jsxs)("div",{className:q.a.component,children:[Object(p.jsx)(P,{title:"".concat(n," | sCrypt by Example | ").concat(a),description:e}),Object(p.jsxs)("div",{className:q.a.content,children:[Object(p.jsx)("h2",{children:n}),Object(p.jsx)(A,{html:t})]})]})};var E=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Hello World",description:"Hello world in sCrypt",html:'<p>The following is a simple contract written in sCrypt. It takes an integer <code>x</code> as a parameter for the constructor.\nIt exposes a single public function <code>equals</code>, which checks if the passed parameter is equal to <code>x</code>.\nOn a lower level this means, that we need to include an integer <code>y</code> in the unlocking script, that unlocks the output containing our smart contract (which stores <code>x</code>).</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">HelloWorld</span> {\n    int x;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equals</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n}\n</code></pre>\n'})};var L=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Constructor",description:"Constructors in sCrypt",html:'<p>We can define a constructor in order to store variables in a contract (locking script).</p>\n<p>The constructor can be defined implicitly:</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Test</span> {\n    int x1;\n    bytes x2;\n    bool x3;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params">int y</span>) {}\n}\n</code></pre>\n<p>or explicitly:</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Test</span> {\n    int x1;\n    bytes x2;\n    bool x3;\n\n    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">int x1, bytes x2, bool x3</span>) {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x1</span> = x1;\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x2</span> = x2;\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x3</span> = x3;\n    }\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params">int y</span>) {}\n}\n</code></pre>\n<p>Both examples are functionally equivalent.</p>\n'})};var F=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Require",description:"Require function in sCrypt",html:'<p>The <code>require()</code> function specifies terms/conditions of a contract. It consumes a boolean condition. If the condition is not met, the contract will abort execution and fail. Otherwise, the execution will resume.</p>\n<p>Every public function must end with a <code>require()</code> call.</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Test</span> {\n    int x;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n}\n</code></pre>\n'})};var K=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Basic Types",description:"Basic types in sCrypt",html:'<p>sCrypt supports the following basic types:</p>\n<ul>\n<li><code>bool</code> - a boolean value <code>true</code> or <code>false</code>,</li>\n<li><code>int</code> - a signed integer of arbitrary length, whose literals are in decimal or hexadecimal format:<pre><code class="language-javascript">int a1 = <span class="hljs-number">42</span>;\nint a2 = -<span class="hljs-number">4242424242424242</span>;\nint a3 = <span class="hljs-number">55066263022277343669578718895168534326250603453777594175500187360389116729240</span>;\nint a4 = <span class="hljs-number">0xFF8C</span>;\nint a5 = <span class="hljs-number">0xff8c</span>;\n</code></pre>\n</li>\n<li><code>bytes</code> -  a variable length array of bytes, whose literals are in quoted hexadecimal format prefixed by <code>b</code>:<pre><code class="language-javascript">bytes b1 = b<span class="hljs-string">&#x27;ffee1234&#x27;</span>;\nbytes b2 = b<span class="hljs-string">&#x27;414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00&#x27;</span>;\nbytes b3 = b<span class="hljs-string">&#x27;1122&#x27;</span> + b<span class="hljs-string">&#x27;eeff&#x27;</span>; <span class="hljs-comment">// b3 is b&#x27;1122eeff&#x27;</span>\n</code></pre>\n</li>\n</ul>\n<h2 id="domain-subtypes">Domain subtypes</h2>\n<p>sCrypt has several subtypes, specific to the Bitcoin context, used to further improve type safety.</p>\n<h3 id="subtypes-of-bytes">Subtypes of <code>bytes</code></h3>\n<ul>\n<li><p><code>PubKey</code> - an EC public key in compressed format (33 bytes):</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">PubKey</span> pubKey = <span class="hljs-title class_">PubKey</span>(b<span class="hljs-string">&#x27;0200112233445566778899aabbccddeeffffeeddccbbaa99887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Sig</code> - an EC signature in DER format with SIGHASH flag appended at the end (0x41 - in the below example, which means <code>SIGHASH_ALL | SIGHASH_FORKID</code>):</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">Sig</span> sig = <span class="hljs-title class_">Sig</span>(b<span class="hljs-string">&#x27;3045022100b71be3f1dc001e0a1ad65ed84e7a5a0bfe48325f2146ca1d677cf15e96e8b80302206d74605e8234eae3d4980fcd7b2fdc1c5b9374f0ce71dea38707fccdbd28cf7e41&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Ripemd160</code> - a RIPEMD-160 hash type:</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">Ripemd160</span> r = <span class="hljs-title class_">Ripemd160</span>(b<span class="hljs-string">&#x27;0011223344556677889999887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Sha1</code> - a SHA-1 hash type:</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">Sha1</span> s = <span class="hljs-title class_">Sha1</span>(b<span class="hljs-string">&#x27;0011223344556677889999887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Sha256</code> - a SHA-256 hash type:</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">Sha256</span> s = <span class="hljs-title class_">Sha256</span>(b<span class="hljs-string">&#x27;00112233445566778899aabbccddeeffffeeddccbbaa99887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>SigHashType</code> - a sighash type / flag.</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">SigHashType</span> s = <span class="hljs-title class_">SigHashType</span>(b<span class="hljs-string">&#x27;01&#x27;</span>);\n<span class="hljs-title class_">SigHashType</span> s = <span class="hljs-title class_">SigHash</span>.<span class="hljs-property">ALL</span> | <span class="hljs-title class_">SigHash</span>.<span class="hljs-property">ANYONECANPAY</span>;\n</code></pre>\n</li>\n<li><p><code>SigHashPreimage</code> - a sighash preimage.</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">SigHashType</span> s = <span class="hljs-title class_">SigHashType</span>(b<span class="hljs-string">&#x27;01&#x27;</span>);\n<span class="hljs-title class_">SigHashType</span> s = <span class="hljs-title class_">SigHash</span>.<span class="hljs-property">ALL</span> | <span class="hljs-title class_">SigHash</span>.<span class="hljs-property">ANYONECANPAY</span>;\n</code></pre>\n</li>\n</ul>\n<h3 id="subtypes-of-int">Subtypes of <code>int</code></h3>\n<ul>\n<li><code>PrivKey</code> - an EC private key.<pre><code class="language-javascript"><span class="hljs-title class_">SigHashType</span> s = <span class="hljs-title class_">SigHashType</span>(b<span class="hljs-string">&#x27;01&#x27;</span>);\n<span class="hljs-title class_">SigHashType</span> s = <span class="hljs-title class_">SigHash</span>.<span class="hljs-property">ALL</span> | <span class="hljs-title class_">SigHash</span>.<span class="hljs-property">ANYONECANPAY</span>;\n</code></pre>\n</li>\n</ul>\n'})};var z=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Public Function",description:"Public functions in sCrypt",html:'<p>A public function is a function, that get&#39;s invoked by an unlocking script. The body of the function corresponds to the locking script of the contract and the functions arguments to the unlocking script. A contract must have at least one public function.</p>\n<p>Public functions don&#39;t return any value and must end with a call to <code>require()</code>. If all calls to <code>require()</code> inside the function evaluate as true, then the contract can be redeemed.</p>\n<p>A public function can be regarded as a mathematical boolean function. <code>f</code> is the function body and <code>x</code> the function arguments. A contract call succeeds if and only if <code>f(x)</code> returns true.</p>\n<h2 id="multiple-public-functions">Multiple Public Functions</h2>\n<p>A contract can have multiple public functions, representing different ways to fulfill a contract. Only one of the public functions can be called at a time. In this case, the last operator of  the unlocking script has to be the index of the public function called, starting from <code>0</code>. For example, if public function <code>larger</code> is called, unlocking script of <code>y 2</code> can fulfill the contract below, in which 2 is the public function index.</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Test</span> {\n    int x;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">smaller</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-built_in">require</span>(y &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">larger</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-built_in">require</span>(y &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n}\n</code></pre>\n'})};var M=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Array Types",description:"Array types in sCrypt",html:'<p>An array is a fixed-size list of values of the same <em>basic</em> type.</p>\n<h3 id="array-literals">Array literals</h3>\n<pre><code class="language-javascript">bool[<span class="hljs-number">3</span>] b = [<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span> &amp;&amp; <span class="hljs-literal">true</span> || <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span> || (<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>)];\nint[<span class="hljs-number">3</span>] c = [<span class="hljs-number">72</span>, -<span class="hljs-number">4</span> - <span class="hljs-number">1</span> - <span class="hljs-number">40</span>, <span class="hljs-number">833</span> * (<span class="hljs-number">99</span> + <span class="hljs-number">9901</span>) + <span class="hljs-number">8888</span>];\nbytes[<span class="hljs-number">3</span>] a = [b<span class="hljs-string">&#x27;ffee&#x27;</span>, b<span class="hljs-string">&#x27;11&#x27;</span>, b<span class="hljs-string">&#x27;22&#x27;</span>];\nint[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] d = [[<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>], [<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]];\n</code></pre>\n<p>Array dimensions can be ommited, when declared:</p>\n<pre><code class="language-javascript">int[] e = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>];\nint[][] f = [[<span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>], [<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]];\n</code></pre>\n<h3 id="repeat-function">Repeat function</h3>\n<p>The function <code>T[size] repeat(T e, static const int size)</code> returns an array with all size elements set to <code>e</code>, where <code>T</code> can be any type. Note <code>size</code> must be a compile time constant.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// a == [0, 0, 0]</span>\nint[<span class="hljs-number">3</span>] a = <span class="hljs-title function_">repeat</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);\n\n<span class="hljs-comment">// arr2D == [[0, 0, 0], [0, 0, 0]]</span>\nint[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] arr2D = <span class="hljs-title function_">repeat</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);\n\nint[<span class="hljs-number">4</span>] flags = [<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>]\nflags = <span class="hljs-title function_">repeat</span>(<span class="hljs-literal">false</span>, <span class="hljs-number">4</span>);   <span class="hljs-comment">// set all flags to be false</span>\n</code></pre>\n<h3 id="index-operator">Index operator</h3>\n<p>A variable index is allowed when reading from an array:</p>\n<pre><code class="language-javascript">int[<span class="hljs-number">3</span>] a = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>];\nint idx = <span class="hljs-number">2</span>;\nint val = a[idx];\n</code></pre>\n<p>An index value, that is out of bounds will cause contract execution to fail immeadiately.</p>\n<p>When writing to an array however, the index operator needs to be a compile-time constant:</p>\n<pre><code class="language-javascript">a[N] = <span class="hljs-number">3</span>;    <span class="hljs-comment">// N is a CTC</span>\n<span class="hljs-comment">// or</span>\na[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>;\n</code></pre>\n'})};var R=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Struct Types",description:"Struct types in sCrypt",html:'<p>A struct is a collection of variable under a single name.</p>\n<p>Structs can be defined like the following:</p>\n<pre><code class="language-javascript">struct <span class="hljs-title class_">Point</span> {\n  int x;\n  int y;\n}\n\nstruct <span class="hljs-title class_">Line</span> {\n  <span class="hljs-title class_">Point</span> start;\n  <span class="hljs-title class_">Point</span> end;\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">Point</span> p = {<span class="hljs-number">10</span>, -<span class="hljs-number">10</span>};\nint x = p.<span class="hljs-property">x</span>;\np.<span class="hljs-property">y</span> = <span class="hljs-number">20</span>;\n\n<span class="hljs-comment">// Define a variable q of type Point, and set members to the same values as those of p</span>\n<span class="hljs-title class_">Point</span> q = p;\n<span class="hljs-built_in">require</span>(p == q); <span class="hljs-comment">// true</span>\n\n<span class="hljs-title class_">Line</span> l = {p, q};\nl.<span class="hljs-property">start</span>.<span class="hljs-property">x</span> = l.<span class="hljs-property">end</span>.<span class="hljs-property">y</span> + <span class="hljs-number">1</span>;\n</code></pre>\n'})};var Y=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Type Inference",description:"Type inference in sCrypt",html:'<p>The <code>auto</code> keyword specifies that the type of the variable, of basic type, declared will be automatically deducted from its initializer.</p>\n<pre><code class="language-javascript">auto a1 = b<span class="hljs-string">&#x27;36&#x27;</span>;      <span class="hljs-comment">// bytes</span>\nauto a2 = <span class="hljs-number">1</span> + <span class="hljs-number">5</span> * <span class="hljs-number">3</span>;  <span class="hljs-comment">// int</span>\n</code></pre>\n'})};var D=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Type Aliases",description:"Type aliases in sCrypt",html:'<p>Type aliases create a new name for a type. It does not actually create a new type, it merely creates a new name to refer to that type.</p>\n<pre><code class="language-javascript">type <span class="hljs-title class_">Age</span> = int;\ntype <span class="hljs-title class_">Coordinate</span> = int[<span class="hljs-number">2</span>];\n</code></pre>\n<p>They can also be used for struct types.</p>\n<pre><code class="language-javascript">struct <span class="hljs-title class_">Point</span> {\n  int x;\n  int y;\n}\n</code></pre>\n<pre><code class="language-javascript">type <span class="hljs-title class_">Coordinate</span> = <span class="hljs-title class_">Point</span>;\n</code></pre>\n'})};var B=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Generic Types",description:"Generic types in sCrypt",html:'<p>A generic type is a parameterized type. It allows a library to work over a variety of types rather than a single one. Users can consume these libraries and use their own concrete types.</p>\n<p>Generic types can only be declared at library level and used within the library\u2019s scope.</p>\n<pre><code class="language-javascript">library <span class="hljs-title class_">HashedMap</span>&lt;K, V&gt; {\n\n  <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">K k, V v, int idx</span>) {\n    ...\n  }\n\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code class="language-javascript"><span class="hljs-title class_">HashedMap</span>&lt;bytes, int&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedMap</span>();\nmap.<span class="hljs-title function_">set</span>(b<span class="hljs-string">&#x27;01&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);\n</code></pre>\n'})};var G=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Const Variables",description:"Const variables in sCrypt",html:'<p>Variables declared const cannot be changed once initialized.</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Test</span> {\n    <span class="hljs-keyword">const</span> int x;\n\n    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">int x</span>) {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x; <span class="hljs-comment">// good, since this is initialization</span>\n    }\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params"><span class="hljs-keyword">const</span> int y</span>) {\n        y = <span class="hljs-number">1</span>; <span class="hljs-comment">// &lt;-- error</span>\n\n        <span class="hljs-keyword">const</span> int a = <span class="hljs-number">36</span>;\n        a = <span class="hljs-number">11</span>; <span class="hljs-comment">// &lt;-- error</span>\n\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n}\n</code></pre>\n'})};var W=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Contract-Private functions",description:"Contract-private functions in sCrypt",html:'<p>sCrypt enables developers to define their own functions as exemplified below:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">int a, int b</span>): int {\n    <span class="hljs-keyword">return</span> a + b;\n}\n</code></pre>\n<p>They are only visible within the contract, similar to <code>private</code> functions in Solidity.</p>\n<p>Every function must end with a <code>return</code> statement. Recursion is disallowed. A function cannot call itself in its body, either directly or indirectly.</p>\n'})};var U=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Exit Function",description:"Exit function in sCrypt",html:'<p><code>exit(bool status)</code> terminates contract execution. If status is <code>true</code>, the contract succeeds; otherwise, it fails.</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">TestPositiveEqual</span> {\n    int x;\n\n    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">int x</span>) {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;\n    }\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-keyword">if</span> (y &lt;= <span class="hljs-number">0</span>) {\n          <span class="hljs-title function_">exit</span>(<span class="hljs-literal">true</span>);\n        }\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>);\n    }\n}\n</code></pre>\n'})};var V=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Code Seperator",description:"Code seperator in sCrypt",html:'<p>Three or more consecutive <code>*</code> in a line insert an <a href="https://wiki.bitcoinsv.io/index.php/OP_CODESEPARATOR">OP_CODESEPARATOR</a>. It is used to exclude what comes before (and including itself) it from being part of the signature.</p>\n<pre><code class="language-javascript">contract <span class="hljs-variable constant_">P2PKH_OCS</span> {\n    <span class="hljs-title class_">Ripemd160</span> pubKeyHash;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">unlock</span>(<span class="hljs-params">Sig sig, PubKey pubKey</span>) {\n        <span class="hljs-comment">// code separator 1</span>\n        ***\n        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">hash160</span>(pubKey) == <span class="hljs-variable language_">this</span>.<span class="hljs-property">pubKeyHash</span>);\n        <span class="hljs-comment">// code separator 2</span>\n        *****\n        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">checkSig</span>(sig, pubKey));\n    }\n}\n</code></pre>\n'})};var J=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Access Modifiers",description:"Access modifiers in sCrypt",html:"<p>There are three types of access modifiers available to help restrict the scope of properties and functions of a contract:</p>\n<ul>\n<li>Default: no keyword required</li>\n<li>Private</li>\n<li>Public: only applies to functions</li>\n</ul>\n<p>Only public functions can be called externally by Bitcoin transactions.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>default</strong></th>\n<th><strong>private</strong></th>\n<th><strong>public</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Same contract</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Other conract</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Externally</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n"})};var Q=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Struct Types",description:"Struct types in sCrypt",html:'<table>\n<thead>\n<tr>\n<th><strong>Precedence</strong></th>\n<th><strong>Operators</strong></th>\n<th><strong>Associativity</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><code>- ! ~</code></td>\n<td>right</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>* / %</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>+ -</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>&lt;&lt; &gt;&gt;</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>&lt; &lt;= &gt; &gt;=</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>== !=</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>&amp;</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>^</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>9</td>\n<td><code>|</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>10</td>\n<td><code>&amp;&amp;</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>11</td>\n<td><code>||</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>12</td>\n<td><code>? :</code></td>\n<td>right</td>\n</tr>\n</tbody></table>\n<p>Operators <code>&amp;&amp;</code>, <code>||</code>, and <code>? :</code> use <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">short-circuit evaluation</a>.</p>\n'})};var Z=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Scoping",description:"Scoping in sCrypt",html:"<p>Scoping in sCrypt follows the prevailing scoping rules of C99 and Solidity. Outer scope variable is shadowed by the inner scope variable of the same name.</p>\n"})};var X=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Static Properties and Functions",description:"Static properties and functions in sCrypt",html:'<p>A static property/function can be referenced with contract name as prefix without an instantiated contract, similar to a static function/property in Javascript or C++. A static property/function can also be referenced without the contract prefix, but only in the contract it is defined in.</p>\n<pre><code class="language-javascript">library <span class="hljs-title class_">Foo</span> {\n    <span class="hljs-keyword">static</span> int N = <span class="hljs-number">0</span>;\n\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">incByN</span>(<span class="hljs-params">int a</span>): int {\n        <span class="hljs-comment">// N is used with and without Foo prefix</span>\n        <span class="hljs-keyword">return</span> a + <span class="hljs-title class_">Foo</span>.<span class="hljs-property">N</span> + N;\n    }\n\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">int x</span>): int {\n        <span class="hljs-comment">// incByN() is called with prefix and without</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">incByN</span>(x) + <span class="hljs-title function_">incByN</span>(x);\n    }\n}\n\ncontract <span class="hljs-title class_">Bar</span> {\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">unlock</span>(<span class="hljs-params">int y</span>) {\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">double</span>(<span class="hljs-number">2</span>));\n        <span class="hljs-built_in">require</span>(y == <span class="hljs-title class_">Foo</span>.<span class="hljs-property">N</span>);\n        <span class="hljs-comment">// N cannot be referenced without Foo prefix</span>\n        <span class="hljs-comment">// require(y == N);</span>\n    }\n}\n</code></pre>\n'})};var $=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Struct Types",description:"Struct types in sCrypt",html:'<p>sCrypt allows looping by repeating the loop body a specified number of times. For example, the loop</p>\n<pre><code class="language-javascript">loop (<span class="hljs-number">10</span>) {\n    x = x * <span class="hljs-number">2</span>;\n}\n</code></pre>\n<p>gets unrolled to</p>\n<pre><code class="language-javascript">x = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\nx = x * <span class="hljs-number">2</span>;\n</code></pre>\n<p>Because loop unrolling is done at compile time, the loop count must be a compile time constant.</p>\n<p>We can also access the loop index by defining an induction variable:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// int[3][4] matrix;</span>\nloop (<span class="hljs-number">3</span>) : i {\n    loop (<span class="hljs-number">4</span>) : j {\n        matrix[i][j] = i + j;\n    }\n}\n</code></pre>\n<p>Loops in sCrypt do not support a break statement, but we can simulate one using conditionals:</p>\n<pre><code class="language-javascript">bool done = <span class="hljs-literal">false</span>;\nloop (<span class="hljs-number">3</span>) {\n    <span class="hljs-keyword">if</span> (!done) {\n        x = x * <span class="hljs-number">2</span>;\n        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">8</span>) {\n            done = <span class="hljs-literal">true</span>;\n        }\n    }\n}\n</code></pre>\n'})};var ss=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Library",description:"Libraries in sCrypt",html:'<p>A library is the same with a contract, except it does not contain any public function. It is only intended to be imported by a contract or other libraries. It thus cannot be independently deployed and called. It is frequently used to group related constants and static functions.</p>\n<pre><code class="language-javascript">library <span class="hljs-title class_">Util</span> {\n    <span class="hljs-comment">// number of bytes to denote some numeric value</span>\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> int <span class="hljs-title class_">DataLen</span> = <span class="hljs-number">1</span>;\n    <span class="hljs-comment">// number of bytes to denote length serialized state, including varint prefix (1 byte) + length (2 bytes), change length to 4 when you need PushData4</span>\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> int <span class="hljs-title class_">StateLen</span> = <span class="hljs-number">3</span>;\n\n    <span class="hljs-comment">// convert signed integer "n" to unsigned integer of "l" bytes, in little endian</span>\n    <span class="hljs-keyword">static</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toLEUnsigned</span>(<span class="hljs-params">int n, int l</span>): bytes {\n        <span class="hljs-comment">// one extra byte to accommodate possible negative sign byte</span>\n        bytes m = <span class="hljs-title function_">num2bin</span>(n, l + <span class="hljs-number">1</span>);\n        <span class="hljs-comment">// remove sign byte</span>\n        <span class="hljs-keyword">return</span> m[<span class="hljs-number">0</span> : <span class="hljs-title function_">len</span>(m) - <span class="hljs-number">1</span>];\n    }\n}\n</code></pre>\n'})};var ns=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Import",description:"Import statement in sCrypt",html:'<p>If we don&#39;t wan&#39;t to store multiple contracts, properties or libraries in the same file, we can split them up into many and use the <code>import</code> statement.</p>\n<p><em>hashPuzzle.scrypt</em>:</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">HashPuzzle</span> {\n    <span class="hljs-title class_">Ripemd160</span> hash;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">spend</span>(<span class="hljs-params">bytes preimage</span>) {\n        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">hash160</span>(preimage) == <span class="hljs-variable language_">this</span>.<span class="hljs-property">hash</span>);\n    }\n}\n</code></pre>\n<p><em>p2pk.scrypt</em>:</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Pay2PubKey</span> {\n    <span class="hljs-title class_">PubKey</span> pubKey;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">spend</span>(<span class="hljs-params">Sig sig</span>) {\n        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">checkSig</span>(sig, <span class="hljs-variable language_">this</span>.<span class="hljs-property">pubKey</span>));\n    }\n}\n</code></pre>\n<p><em>p2pkh.scrypt</em>:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">"./hashPuzzle.scrypt"</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">"./p2pk.scrypt"</span>;\n\ncontract <span class="hljs-title class_">Pay2PubKeyHash</span> {\n    <span class="hljs-title class_">Ripemd160</span> pubKeyHash;\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">spend</span>(<span class="hljs-params">Sig sig, PubKey pubKey</span>) {\n        <span class="hljs-title class_">HashPuzzle</span> hp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashPuzzle</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">pubKeyHash</span>);\n        <span class="hljs-built_in">require</span>(hp.<span class="hljs-title function_">spend</span>(pubKey));\n\n        <span class="hljs-title class_">Pay2PubKey</span> p2pk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pay2PubKey</span>(pubKey);\n        <span class="hljs-built_in">require</span>(p2pk.<span class="hljs-title function_">spend</span>(sig));\n    }\n}\n</code></pre>\n<p><a href="https://scryptdoc.readthedocs.io/en/latest/contracts.html?highlight=import#id1">Standard libraries</a> don&#39;t need to be imported explicitly.</p>\n'})};var as=function(){return Object(p.jsx)(I,{version:"0.1.0",title:"Statefull Contract",description:"Statefull contracts in sCrypt",html:'<p>Declare any property that is part of the state with <code>@state</code> decorator. The state property can be used the same way as a regular property.</p>\n<p>In order to presist the state, we need to enforce it in the output of the transaction, that will spend our contract in the future. To achieve that, the spending transaction must pass it&#39;s transaction preimage.</p>\n<pre><code class="language-javascript">contract <span class="hljs-title class_">Counter</span> {\n    @state\n    int counter;\n\n    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">int counter</span>) {\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span> = counter;\n    }\n\n    public <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params">SigHashPreimage txPreimage, int amount</span>) {\n        <span class="hljs-comment">// Ensure that the passed preimage is correct for this TX.</span>\n        <span class="hljs-built_in">require</span>(<span class="hljs-title class_">Tx</span>.<span class="hljs-title function_">checkPreimage</span>(txPreimage));\n\n        <span class="hljs-comment">// Mutate state.</span>\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>++;\n\n        <span class="hljs-comment">// Get this TXs output.</span>\n        bytes outputScript = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getStateScript</span>();\n\n        <span class="hljs-comment">// Construct an output from its locking script and satoshi amount.</span>\n        bytes output = <span class="hljs-title class_">Util</span>.<span class="hljs-title function_">buildOutput</span>(outputScript, amount);\n\n        <span class="hljs-comment">// Ensure that the TX actually contains this exact output.</span>\n        <span class="hljs-built_in">require</span>(<span class="hljs-title function_">hash256</span>(output) == <span class="hljs-title class_">Util</span>.<span class="hljs-title function_">hashOutputs</span>(txPreimage));\n    }\n}\n</code></pre>\n'})},es=a(9),ts=a.n(es),ls=a.p+"static/media/youtube.350d8f8f.svg",cs=[{title:"",routes:[{path:"hello-world",title:"Hello World"},{path:"constructor",title:"Constructor"},{path:"require",title:"Require"},{path:"basic-types",title:"Basic Types"},{path:"array-types",title:"Array Types"},{path:"struct-types",title:"Struct Types"},{path:"type-inference",title:"Type Inference"},{path:"type-aliases",title:"Type Aliases"},{path:"generics",title:"Generics"},{path:"const-variables",title:"Const Variables"},{path:"public-function",title:"Public Function"},{path:"contract-private-functions",title:"Contract-Private Functions"},{path:"exit",title:"Exit"},{path:"code-seperator",title:"Code seperator"},{path:"access-modifiers",title:"Access Modifiers"},{path:"operators",title:"Operators"},{path:"scoping",title:"Scoping"},{path:"static",title:"Static"},{path:"loop",title:"Loop"},{path:"library",title:"Library"},{path:"import",title:"Import"},{path:"statefull-contract",title:"Statefull Contract"}]}],ps=[""];var is=[{path:"/hello-world",component:E},{path:"/constructor",component:L},{path:"/require",component:F},{path:"/basic-types",component:K},{path:"/array-types",component:M},{path:"/struct-types",component:R},{path:"/type-inference",component:Y},{path:"/type-aliases",component:D},{path:"/generics",component:B},{path:"/const-variables",component:G},{path:"/public-function",component:z},{path:"/contract-private-functions",component:W},{path:"/exit",component:U},{path:"/code-seperator",component:V},{path:"/access-modifiers",component:J},{path:"/operators",component:Q},{path:"/scoping",component:Z},{path:"/static",component:X},{path:"/loop",component:$},{path:"/library",component:ss},{path:"/import",component:ns},{path:"/statefull-contract",component:as},{path:"",component:function(){return Object(p.jsxs)("div",{className:ts.a.component,children:[Object(p.jsx)(P,{title:"sCrypt by Example",description:"Learn smart contract programming using sCrypt"}),Object(p.jsx)("h1",{className:ts.a.header,children:Object(p.jsx)("a",{href:"/",children:"sCrypt by Example"})}),Object(p.jsx)("div",{className:ts.a.subHeader}),Object(p.jsxs)("div",{className:ts.a.main,children:[Object(p.jsxs)("p",{children:["an introduction to ",Object(p.jsx)("a",{href:"https://scrypt.io/",children:"sCrypt"})," with simple examples"]}),Object(p.jsxs)("div",{className:ts.a.youTube,children:[Object(p.jsx)("img",{src:ls,alt:"logo",className:ts.a.youTubeLogo}),Object(p.jsx)("a",{href:"https://www.youtube.com/watch?v=xPfCM6gBl-Y&list=PL0Kn1t30VSpG4Fu2ze81uDptBd1ZML99A",target:"__blank",children:"Learning sCrypt video playlist."})]}),Object(p.jsx)("div",{className:ts.a.updates,children:ps.map((function(s,n){return Object(p.jsx)("div",{children:s},n)}))}),cs.map((function(s,n){var a=s.routes,e=s.title;return Object(p.jsxs)("div",{children:[e&&Object(p.jsx)("h3",{className:ts.a.category,children:e}),Object(p.jsx)("ul",{className:ts.a.list,children:a.map((function(s){var n=s.path,a=s.title;return Object(p.jsx)("li",{className:ts.a.listItem,children:Object(p.jsx)("a",{href:n,children:a})},n)}))})]},n)}))]})]})}}];var rs=function(){var s=o(),n=s.state,a=s.loadLocalStorage;return Object(e.useEffect)((function(){a()}),[]),n.loading?null:Object(p.jsx)(d.a,{basename:"",children:Object(p.jsxs)("div",{className:m.a.component,children:[Object(p.jsx)(_,{}),Object(p.jsx)("div",{className:m.a.main,children:Object(p.jsx)(u.c,{children:is.map((function(s){return Object(p.jsx)(u.a,{path:s.path,exact:!0,component:s.component},s.path)}))})}),Object(p.jsx)("div",{className:m.a.footer,children:Object(p.jsx)(N,{})})]})})};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var os=document.getElementById("root");os.hasChildNodes()?Object(t.hydrate)(Object(p.jsx)(h,{children:Object(p.jsx)(rs,{})}),os):Object(t.render)(Object(p.jsx)(h,{children:Object(p.jsx)(rs,{})}),os),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(s){s.unregister()})).catch((function(s){console.error(s.message)}))},5:function(s,n,a){s.exports={component:"Footer_component__2wm-B",row:"Footer_row__3cluQ",bar:"Footer_bar__93usQ",khan:"Footer_khan__3lTcL",social:"Footer_social__2zV0n",scrypt:"Footer_scrypt__l_4AP",telegram:"Footer_telegram__24TIZ",discord:"Footer_discord__3WEtR",youTube:"Footer_youTube__aIeLj",slack:"Footer_slack__1g_De",github:"Footer_github__dwe1R",medium:"Footer_medium__3xje4"}},9:function(s,n,a){s.exports={component:"pages_component__1bqIE",updates:"pages_updates__3xY-4",category:"pages_category__4oGsu",listItem:"pages_listItem__1RzOh",label:"pages_label__i9P1V",header:"pages_header__o5uPl",youTube:"pages_youTube__3ueeo",youTubeLogo:"pages_youTubeLogo__3p01g"}}},[[38,1,2]]]);
//# sourceMappingURL=main.a53dd97a.chunk.js.map