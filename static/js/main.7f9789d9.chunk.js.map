{"version":3,"sources":["components/Header.module.css","App.module.css","components/Example.module.css","contexts/AppContext.tsx","components/scrypt.png","components/mode-light.svg","components/mode-dark.svg","components/Header.tsx","components/telegram.png","components/github.png","components/slack.png","components/medium.png","components/Footer.tsx","components/SEO.tsx","components/Html.tsx","components/Example.tsx","pages/access-modifiers/index.tsx","pages/access-modifiers/index.html.ts","pages/array-types/index.tsx","pages/array-types/index.html.ts","pages/auction/index.tsx","pages/auction/index.html.ts","pages/basic-types/index.tsx","pages/basic-types/index.html.ts","pages/code-seperator/index.tsx","pages/code-seperator/index.html.ts","pages/cointoss/index.tsx","pages/cointoss/index.html.ts","pages/const-variables/index.tsx","pages/const-variables/index.html.ts","pages/constructor/index.tsx","pages/constructor/index.html.ts","pages/contract-private-functions/index.tsx","pages/contract-private-functions/index.html.ts","pages/ecdsa-oracles/index.tsx","pages/ecdsa-oracles/index.html.ts","pages/exit/index.tsx","pages/exit/index.html.ts","pages/generics/index.tsx","pages/generics/index.html.ts","pages/gol/index.tsx","pages/gol/index.html.ts","pages/hello-world/index.tsx","pages/hello-world/index.html.ts","pages/if-else/index.tsx","pages/if-else/index.html.ts","pages/import/index.tsx","pages/import/index.html.ts","pages/inline-assembly/index.tsx","pages/inline-assembly/index.html.ts","pages/library/index.tsx","pages/library/index.html.ts","pages/loop/index.tsx","pages/loop/index.html.ts","pages/multiparty-hash-puzzles/index.tsx","pages/multiparty-hash-puzzles/index.html.ts","pages/operators/index.tsx","pages/operators/index.html.ts","pages/p2pkh/index.tsx","pages/p2pkh/index.html.ts","pages/public-function/index.tsx","pages/public-function/index.html.ts","pages/r-puzzle/index.tsx","pages/r-puzzle/index.html.ts","pages/rabin-signature/index.tsx","pages/rabin-signature/index.html.ts","pages/require/index.tsx","pages/require/index.html.ts","pages/rule110/index.tsx","pages/rule110/index.html.ts","pages/schnoor-signature/index.tsx","pages/schnoor-signature/index.html.ts","pages/scoping/index.tsx","pages/scoping/index.html.ts","pages/stateful-contract/index.tsx","pages/stateful-contract/index.html.ts","pages/static/index.tsx","pages/static/index.html.ts","pages/struct-types/index.tsx","pages/struct-types/index.html.ts","pages/tic-tac-toe/index.tsx","pages/tic-tac-toe/index.html.ts","pages/turing-machine/index.tsx","pages/turing-machine/index.html.ts","pages/type-aliases/index.tsx","pages/type-aliases/index.html.ts","pages/type-inference/index.tsx","pages/type-inference/index.html.ts","pages/vanity-address/index.tsx","pages/vanity-address/index.html.ts","components/youtube.svg","pages/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Footer.module.css","pages/index.module.css"],"names":["module","exports","INITIAL_STATE","theme","loading","AppContext","createContext","state","setTheme","loadLocalStorage","useAppContext","useContext","Provider","children","useState","setState","_setTheme","document","body","classList","remove","add","localStorage","getItem","error","console","setItem","_saveToLocalStorage","value","useMemo","Header","logo","logoDark","onClickTheme","className","styles","component","href","src","alt","header","versions","version","modeLight","light","onClick","e","modeDark","dark","Footer","row","scrypt","target","social","github","medium","slack","telegram","bar","SEO","title","description","Helmet","name","content","Html","html","useEffect","navigator","userAgent","querySelectorAll","forEach","pre","div","createElement","button","ariaLabel","icon","appendChild","code","firstChild","insertBefore","addEventListener","preventDefault","textArea","setAttribute","innerText","select","execCommand","removeChild","copy","childNodes","dangerouslySetInnerHTML","__html","Example","ExamplePage","ROUTES_BY_CATEGORY","routes","path","UPDATES","HomePage","component_access_modifiers","component_array_types","component_auction","component_basic_types","component_code_seperator","component_cointoss","component_const_variables","component_constructor","component_contract_private_functions","component_ecdsa_oracles","component_exit","component_generics","component_gol","component_hello_world","component_if_else","component_import","component_inline_assembly","component_library","component_loop","component_multiparty_hash_puzzles","component_operators","component_p2pkh","component_public_function","component_r_puzzle","component_rabin_signature","component_require","component_rule110","component_schnoor_signature","component_scoping","component_stateful_contract","component_static","component_struct_types","component_tic_tac_toe","component_turing_machine","component_type_aliases","component_type_inference","component_vanity_address","subHeader","main","youTube","youTubeLogo","updates","map","text","i","category","list","listItem","App","basename","process","route","exact","footer","Boolean","window","location","hostname","match","rootElement","getElementById","hasChildNodes","hydrate","render","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,qBAAqB,OAAS,uBAAuB,SAAW,yBAAyB,IAAM,oBAAoB,QAAU,wB,qBCAtPD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,KAAO,kBAAkB,OAAS,oB,qBCAvFD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,QAAU,yB,gHCQ7DC,EAA0B,CAC9BC,MAAO,QACPC,SAAS,GAGLC,EAAaC,wBAAc,CAC/BC,MAAOL,EACPM,SAAU,SAACL,GAAkB,EAC7BM,iBAAkB,WAAO,IAGpB,SAASC,IACd,OAAOC,qBAAWN,EACpB,CAYO,IAAMO,EAA4B,SAAH,GAAsB,IAAhBC,EAAQ,EAARA,SAC1C,EAA0BC,mBAASZ,GAAc,mBAA1CK,EAAK,KAAEQ,EAAQ,KAEtB,SAASC,EAAUb,GACJ,QAATA,GACFc,SAASC,KAAKC,UAAUC,OAAO,SAC/BH,SAASC,KAAKC,UAAUE,IAAI,UAE5BJ,SAASC,KAAKC,UAAUC,OAAO,QAC/BH,SAASC,KAAKC,UAAUE,IAAI,SAEhC,CAEA,SAASZ,IACP,IAEE,IAAMN,EAAemB,aAAaC,QAAQ,UAAY,QAEtDP,EAAUb,GAEVY,GAAS,SAACR,GAAK,kCACVA,GAAK,IACRJ,SAAK,GAIT,CAFE,MAAOqB,GACPC,QAAQD,MAAMA,EAChB,CAEAT,GAAS,SAACR,GAAK,kCACVA,GAAK,IACRH,SAAS,GAAK,GAElB,CAEA,SAASI,EAASL,GAChBa,EAAUb,GACVY,EAAS,2BAAKR,GAAK,IAAEJ,WA9CzB,SAA6BA,GAC3B,IACEmB,aAAaI,QAAQ,QAASvB,EAGhC,CAFE,MAAOqB,GACPC,QAAQD,MAAMA,EAChB,CACF,CAyCIG,CAAoBxB,EACtB,CAEA,OACE,cAACE,EAAWO,SAAQ,CAClBgB,MAAOC,mBACL,iBAAO,CACLtB,QACAE,mBACAD,WACD,GACD,CAACD,IACD,SAEDM,GAGP,E,iDCxFe,MAA0B,mCCA1B,MAA0B,uCCA1B,MAA0B,sCCmD1BiB,MA3Cf,WACE,MAA4BpB,IAApBH,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAEXuB,GAAOxB,EAAMJ,MAAkB6B,GAEnC,SAASC,EAAa9B,GACpBK,EAASL,EACX,CAGA,OACE,sBAAK+B,UAAWC,IAAOC,UAAU,UAC/B,mBAAGC,KAAK,IAAG,SACT,qBAAKC,IAAKP,EAAMQ,IAAI,OAAOL,UAAWC,IAAOJ,SAG/C,qBAAIG,UAAWC,IAAOK,OAAO,UAC3B,mBAAGH,KAAK,IAAG,+BAEX,qBAAKH,UAAWC,IAAOM,SAAS,SAC9B,qBAAKP,UAAWC,IAAOO,eAIX,QAAfnC,EAAMJ,MACL,qBACEmC,IAAKK,EACLJ,IAAI,aACJL,UAAWC,IAAOS,MAClBC,QAAS,SAACC,GAAC,OAAKb,EAAa,QAAQ,IAGvC,qBACEK,IAAKS,EACLR,IAAI,YACJL,UAAWC,IAAOa,KAClBH,QAAS,SAACC,GAAC,OAAKb,EAAa,OAAO,MAK9C,E,gBCjDe,MAA0B,qCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,mCCsE1BgB,MA3Df,WACE,OACE,sBAAKf,UAAWC,IAAOC,UAAU,UAC/B,sBAAKF,UAAWC,IAAOe,IAAI,UACzB,qBAAKZ,IAAKa,EAAQZ,IAAI,SAASL,UAAWC,IAAOgB,SACjD,mBAAGd,KAAK,qBAAqBe,OAAO,UAAS,4EAI/C,sBAAKlB,UAAWC,IAAOkB,OAAO,UAC5B,sBAAKnB,UAAWC,IAAOe,IAAI,UACzB,qBAAKZ,IAAKgB,EAAQf,IAAI,SAASL,UAAWC,IAAOmB,SACjD,mBAAGjB,KAAK,gCAAgCe,OAAO,UAAS,uBAI1D,sBAAKlB,UAAWC,IAAOe,IAAI,UACzB,qBAAKZ,IAAKiB,EAAQhB,IAAI,SAASL,UAAWC,IAAOoB,SACjD,mBAAGlB,KAAK,iCAAiCe,OAAO,UAAS,uBAI3D,sBAAKlB,UAAWC,IAAOe,IAAI,UACzB,qBAAKZ,IAAKkB,EAAOjB,IAAI,QAAQL,UAAWC,IAAOqB,QAC/C,mBAAGnB,KAAK,qKAAqKe,OAAO,UAAS,sBAI/L,sBAAKlB,UAAWC,IAAOe,IAAI,UACzB,qBAAKZ,IAAKmB,EAAUlB,IAAI,WAAWL,UAAWC,IAAOsB,WACrD,mBAAGpB,KAAK,+CAA+Ce,OAAO,UAAS,4BAK3E,qBAAKlB,UAAWC,IAAOe,IAAI,SACzB,mBAAGb,KAAK,mCAAkC,iCAI5C,sBAAKH,UAAWC,IAAOe,IAAI,UACzB,mBACEb,KAAK,4DACLe,OAAO,UAAS,oBAIlB,qBAAKlB,UAAWC,IAAOuB,IAAI,eAC3B,mBACErB,KAAK,kFACLe,OAAO,UAAS,0BAO1B,E,QCnDeO,EATc,SAAH,GAAgC,IAA1BC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YACrC,OACE,eAACC,EAAA,EAAM,WACL,gCAAQF,IACR,sBAAMG,KAAK,cAAcC,QAASH,MAGxC,ECqEeI,EArEe,SAAH,GAAkB,IAAZC,EAAI,EAAJA,KAkE/B,OAnDAC,qBAAU,WAER,GAA4B,cAAxBC,UAAUC,UAAd,CAgBapD,SAASqD,iBAAiB,OAClCC,SAAQ,SAACC,GAEZ,IAAMC,EAAMxD,SAASyD,cAAc,OACnCD,EAAIvC,UAAY,UAGhB,IAAMyC,EAAS1D,SAASyD,cAAc,UACtCC,EAAOzC,UAAY,yBACnByC,EAAOf,MAAQ,oBAEfe,EAAOC,UAAY,oBAEnB,IAAMC,EAAO5D,SAASyD,cAAc,KACpCG,EAAK3C,UAAY,cACjByC,EAAOG,YAAYD,GAEnBJ,EAAIK,YAAYH,GAEhB,IAAMI,EAAOP,EAAIQ,WACjBR,EAAIS,aAAaR,EAAKM,GAGtBJ,EAAOO,iBAAiB,SAAS,SAACpC,GAChCA,EAAEqC,iBApCO,SAAC/B,GACZ,IAAMgC,EAAWnE,SAASyD,cAAc,YACxCU,EAASC,aAAa,QAAS,iCAC/BpE,SAASC,KAAK4D,YAAYM,GAE1BA,EAASxD,MAAQwB,EAAOkC,UACxBF,EAASG,SACTtE,SAASuE,YAAY,QAErBvE,SAASC,KAAKuE,YAAYL,EAC5B,CA8BIM,CAAKlB,EAAImB,WAAW,GACtB,GACF,GA5CA,CA6CF,GAAG,IAEI,qBAAKC,wBAAyB,CAAEC,OAAQ3B,IACjD,E,iBCrDe4B,EAjBkB,SAAH,GAA+C,IAAzClC,EAAK,EAALA,MAAOlB,EAAO,EAAPA,QAASmB,EAAW,EAAXA,YAAaK,EAAI,EAAJA,KAC/D,OACE,sBAAKhC,UAAWC,IAAOC,UAAU,UAC/B,cAAC,EAAG,CACFwB,MAAK,UAAKA,EAAK,kCAA0BlB,GACzCmB,YAAaA,IAEf,sBAAK3B,UAAWC,IAAO6B,QAAQ,UAC7B,6BAAKJ,IAEL,cAAC,EAAI,CAACM,KAAMA,SAKpB,ECZe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,mBDOfC,YCNqB,6BDOrBK,KCLI,ouBDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,cDOfC,YCNqB,wBDOrBK,KCLI,u3HDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,UDOfC,YCNqB,oBDOrBK,KCLI,yqIDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,cDOfC,YCNqB,wBDOrBK,KCLI,y6IDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,iBDOfC,YCNqB,2BDOrBK,KCLI,+kCDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,iBDOfC,YCNqB,2BDOrBK,KCLI,uuFDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,kBDOfC,YCNqB,4BDOrBK,KCLI,soCDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,cDOfC,YCNqB,yBDOrBK,KCLI,4vCDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,YDOfC,YCNqB,sBDOrBK,KCLI,2mBDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,sBDOfC,YCNqB,gCDOrBK,KCLI,6mHDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,gBDOfC,YCNqB,0BDOrBK,KCLI,0+BDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,gBDOfC,YCNqB,0BDOrBK,KCLI,w+BDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,wBDOfC,YCNqB,kCDOrBK,KCLI,6lODQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,cDOfC,YCNqB,wBDOrBK,KCLI,k3BDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,YDOfC,YCNqB,gCDOrBK,KCLI,y4BDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,SDOfC,YCNqB,6BDOrBK,KCLI,gqFDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,kBDOfC,YCNqB,4BDOrBK,KCLI,6wBDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,UDOfC,YCNqB,sBDOrBK,KCLI,yxDDQV,EEEe6B,MAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,QDOfC,YCNqB,kBDOrBK,KCLI,iuDDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,0BDOfC,YCNqB,oCDOrBK,KCLI,ulIDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,YDOfC,YCNqB,sBDOrBK,KCLI,isCDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,QDOfC,YCNqB,2CDOrBK,KCLI,m+BDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,kBDOfC,YCNqB,6BDOrBK,KCLI,kvEDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,WDOfC,YCNqB,8BDOrBK,KCLI,g8DDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,mBDOfC,YCNqB,6BDOrBK,KCLI,s7DDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,UDOfC,YCNqB,6BDOrBK,KCLI,8tBDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,WDOfC,YCNqB,qBDOrBK,KCLI,s1LDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,qBDOfC,YCNqB,+BDOrBK,KCLI,m5GDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,UDOfC,YCNqB,oBDOrBK,KCLI,uKDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,oBDOfC,YCNqB,+BDOrBK,KCLI,ghEDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,kCDOfC,YCNqB,4CDOrBK,KCLI,6iEDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,eDOfC,YCNqB,yBDOrBK,KCLI,0vCDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,cDOfC,YCNqB,wBDOrBK,KCLI,4rRDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,iBDOfC,YCNqB,2BDOrBK,KCLI,wtXDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,eDOfC,YCNqB,yBDOrBK,KCLI,mwBDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,iBDOfC,YCNqB,2BDOrBK,KCLI,seDQV,EEEe6B,OAXf,WACE,OACE,cAAC,EAAO,CACNrD,QCNiB,QDOjBkB,MCNe,wCDOfC,YCNqB,kDDOrBK,KCLI,+2KDQV,E,mBEbe,OAA0B,oCCwK5B8B,GAAqB,CAChC,CACEpC,MAAO,GACPqC,OAjKwB,CAC1B,CACEC,KAAM,cACNtC,MAAO,eAET,CACEsC,KAAM,cACNtC,MAAO,eAET,CACEsC,KAAM,UACNtC,MAAO,WAET,CACEsC,KAAM,cACNtC,MAAO,eAET,CACEsC,KAAM,cACNtC,MAAO,eAET,CACEsC,KAAM,eACNtC,MAAO,gBAET,CACEsC,KAAM,iBACNtC,MAAO,kBAET,CACEsC,KAAM,eACNtC,MAAO,gBAET,CACEsC,KAAM,WACNtC,MAAO,YAET,CACEsC,KAAM,kBACNtC,MAAO,mBAET,CACEsC,KAAM,UACNtC,MAAO,aAET,CACEsC,KAAM,kBACNtC,MAAO,mBAET,CACEsC,KAAM,6BACNtC,MAAO,aAET,CACEsC,KAAM,OACNtC,MAAO,QAMT,CACEsC,KAAM,mBACNtC,MAAO,oBAET,CACEsC,KAAM,YACNtC,MAAO,aAET,CACEsC,KAAM,UACNtC,MAAO,WAET,CACEsC,KAAM,SACNtC,MAAO,UAET,CACEsC,KAAM,OACNtC,MAAO,QAET,CACEsC,KAAM,UACNtC,MAAO,WAET,CACEsC,KAAM,SACNtC,MAAO,UAET,CACEsC,KAAM,oBACNtC,MAAO,qBAET,CACEsC,KAAM,kBACNtC,MAAO,qBAoET,CACEA,MAAO,eACPqC,OAlEwB,CAC1B,CACEC,KAAM,QACNtC,MAAO,kCAET,CACEsC,KAAM,WACNtC,MAAO,YAET,CACEsC,KAAM,kBACNtC,MAAO,mBAET,CACEsC,KAAM,oBACNtC,MAAO,sBAET,CACEsC,KAAM,0BACNtC,MAAO,2BAET,CACEsC,KAAM,gBACNtC,MAAO,uBAET,CACEsC,KAAM,iBACNtC,MAAO,kDAET,CACEsC,KAAM,UACNtC,MAAO,YAET,CACEsC,KAAM,WACNtC,MAAO,kBAET,CACEsC,KAAM,cACNtC,MAAO,eAET,CACEsC,KAAM,UACNtC,MAAO,YAET,CACEsC,KAAM,MACNtC,MAAO,wBAET,CACEsC,KAAM,iBACNtC,MAAO,qBAqCLuC,GAAU,CACd,IAsDaC,ICpDAH,GA3JS,CACpB,CACIC,KAAM,oBACN9D,UAAWiE,GAEf,CACIH,KAAM,eACN9D,UAAWkE,GAEf,CACIJ,KAAM,WACN9D,UAAWmE,GAEf,CACIL,KAAM,eACN9D,UAAWoE,GAEf,CACIN,KAAM,kBACN9D,UAAWqE,GAEf,CACIP,KAAM,YACN9D,UAAWsE,GAEf,CACIR,KAAM,mBACN9D,UAAWuE,GAEf,CACIT,KAAM,eACN9D,UAAWwE,GAEf,CACIV,KAAM,8BACN9D,UAAWyE,GAEf,CACIX,KAAM,iBACN9D,UAAW0E,GAEf,CACIZ,KAAM,QACN9D,UAAW2E,GAEf,CACIb,KAAM,YACN9D,UAAW4E,GAEf,CACId,KAAM,OACN9D,UAAW6E,GAEf,CACIf,KAAM,eACN9D,UAAW8E,GAEf,CACIhB,KAAM,WACN9D,UAAW+E,GAEf,CACIjB,KAAM,UACN9D,UAAWgF,GAEf,CACIlB,KAAM,mBACN9D,UAAWiF,GAEf,CACInB,KAAM,WACN9D,UAAWkF,GAEf,CACIpB,KAAM,QACN9D,UAAWmF,GAEf,CACIrB,KAAM,2BACN9D,UAAWoF,IAEf,CACItB,KAAM,aACN9D,UAAWqF,IAEf,CACIvB,KAAM,SACN9D,UAAWsF,IAEf,CACIxB,KAAM,mBACN9D,UAAWuF,IAEf,CACIzB,KAAM,YACN9D,UAAWwF,IAEf,CACI1B,KAAM,mBACN9D,UAAWyF,IAEf,CACI3B,KAAM,WACN9D,UAAW0F,IAEf,CACI5B,KAAM,WACN9D,UAAW2F,IAEf,CACI7B,KAAM,qBACN9D,UAAW4F,IAEf,CACI9B,KAAM,WACN9D,UAAW6F,IAEf,CACI/B,KAAM,qBACN9D,UAAW8F,IAEf,CACIhC,KAAM,UACN9D,UAAW+F,IAEf,CACIjC,KAAM,gBACN9D,UAAWgG,IAEf,CACIlC,KAAM,eACN9D,UAAWiG,IAEf,CACInC,KAAM,kBACN9D,UAAWkG,IAEf,CACIpC,KAAM,gBACN9D,UAAWmG,IAEf,CACIrC,KAAM,kBACN9D,UAAWoG,IAEf,CACItC,KAAM,kBACN9D,UAAWqG,IAEf,CACIvC,KAAM,GACN9D,UDKR,WACE,OACE,sBAAKF,UAAWC,KAAOC,UAAU,UAC/B,cAAC,EAAG,CACFwB,MAAM,oBACNC,YAAY,kDAEd,oBAAI3B,UAAWC,KAAOK,OAAO,SAC3B,mBAAGH,KAAK,IAAG,iCAEb,qBAAKH,UAAWC,KAAOuG,YACvB,sBAAKxG,UAAWC,KAAOwG,KAAK,UAC1B,oDACqB,mBAAGtG,KAAK,qBAAoB,oBAAW,4BAI5D,sBAAKH,UAAWC,KAAOyG,QAAQ,UAC7B,qBAAKtG,IAAKsG,GAASrG,IAAI,OAAOL,UAAWC,KAAO0G,cAChD,mBACExG,KAAK,sFACLe,OAAO,UAAS,gDAMpB,qBAAKlB,UAAWC,KAAO2G,QAAQ,SAC5B3C,GAAQ4C,KAAI,SAACC,EAAMC,GAAC,OACnB,8BAAcD,GAAJC,EAAe,MAI5BjD,GAAmB+C,KAAI,WAAoBE,GAAC,IAAlBhD,EAAM,EAANA,OAAQrC,EAAK,EAALA,MAAK,OACtC,gCACGA,GAAS,oBAAI1B,UAAWC,KAAO+G,SAAS,SAAEtF,IAE3C,oBAAI1B,UAAWC,KAAOgH,KAAK,SACxBlD,EAAO8C,KAAI,gBAAG7C,EAAI,EAAJA,KAAMtC,EAAK,EAALA,MAAK,OACxB,oBAAI1B,UAAWC,KAAOiH,SAAS,SAC7B,mBAAG/G,KAAM6D,EAAK,SAAEtC,KADmBsC,EAEhC,QAPD+C,EAUJ,SAKhB,IE/MeI,OAnCf,WACE,MAAoC3I,IAA5BH,EAAK,EAALA,MAAOE,EAAgB,EAAhBA,iBAMf,OAJA0D,qBAAU,WACR1D,GACF,GAAG,IAECF,EAAMH,QACD,KAIP,cAAC,IAAM,CAACkJ,SAAUC,GAAuB,SACvC,sBAAKrH,UAAWC,IAAOC,UAAU,UAC/B,cAAC,EAAM,IACP,qBAAKF,UAAWC,IAAOwG,KAAK,SAC1B,cAAC,IAAM,UACJ1C,GAAO8C,KAAI,SAACS,GAAK,OAChB,cAAC,IAAK,CAEJtD,KAAMsD,EAAMtD,KACZuD,OAAK,EACLrH,UAAWoH,EAAMpH,WAHZoH,EAAMtD,KAIX,QAIR,qBAAKhE,UAAWC,IAAOuH,OAAO,SAC5B,cAAC,EAAM,UAKjB,EC7BoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,GAAc/I,SAASgJ,eAAe,QAExCD,GAAYE,gBACdC,kBACE,cAAC,EAAkB,UACjB,cAAC,GAAG,MAENH,IAGFI,iBACE,cAAC,EAAkB,UACjB,cAAC,GAAG,MAENJ,IDsHE,kBAAmB5F,WACrBA,UAAUiG,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAlJ,GACLC,QAAQD,MAAMA,EAAMmJ,QACtB,G,oBEjJN3K,EAAOC,QAAU,CAAC,UAAY,0BAA0B,IAAM,oBAAoB,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,uBAAuB,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,wBAAwB,QAAU,wBAAwB,MAAQ,sBAAsB,OAAS,uBAAuB,OAAS,uB,oBCAvXD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,QAAU,uBAAuB,SAAW,wBAAwB,SAAW,wBAAwB,MAAQ,qBAAqB,OAAS,sBAAsB,QAAU,uBAAuB,YAAc,2B","file":"static/js/main.7f9789d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Header_component__1tkkW\",\"logo\":\"Header_logo__2ins2\",\"light\":\"Header_light__3PSbv\",\"dark\":\"Header_dark__2nvtJ\",\"header\":\"Header_header__3mObx\",\"versions\":\"Header_versions__eOBao\",\"bar\":\"Header_bar__23jec\",\"version\":\"Header_version__1QJXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"App_component__1dd61\",\"main\":\"App_main__3ZkGI\",\"footer\":\"App_footer__29Fsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Example_component__mzuGC\",\"content\":\"Example_content__3-AiU\"};","import React, { useState, createContext, useContext, useMemo } from \"react\"\n\nexport type Theme = \"light\" | \"dark\"\n\ninterface AppState {\n  theme: Theme\n  loading: boolean\n}\n\nconst INITIAL_STATE: AppState = {\n  theme: \"light\",\n  loading: true,\n}\n\nconst AppContext = createContext({\n  state: INITIAL_STATE,\n  setTheme: (theme: Theme) => {},\n  loadLocalStorage: () => {},\n})\n\nexport function useAppContext() {\n  return useContext(AppContext)\n}\n\nfunction _saveToLocalStorage(theme: Theme) {\n  try {\n    localStorage.setItem(\"theme\", theme)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\ninterface Props {}\n\nexport const Provider: React.FC<Props> = ({ children }) => {\n  const [state, setState] = useState(INITIAL_STATE)\n\n  function _setTheme(theme: Theme) {\n    if (theme == \"dark\") {\n      document.body.classList.remove(\"light\")\n      document.body.classList.add(\"dark\")\n    } else {\n      document.body.classList.remove(\"dark\")\n      document.body.classList.add(\"light\")\n    }\n  }\n\n  function loadLocalStorage() {\n    try {\n      // @ts-ignore\n      const theme: Theme = localStorage.getItem(\"theme\") || \"light\"\n\n      _setTheme(theme)\n\n      setState((state) => ({\n        ...state,\n        theme,\n      }))\n    } catch (error) {\n      console.error(error)\n    }\n\n    setState((state) => ({\n      ...state,\n      loading: false,\n    }))\n  }\n\n  function setTheme(theme: Theme) {\n    _setTheme(theme)\n    setState({ ...state, theme })\n    _saveToLocalStorage(theme)\n  }\n\n  return (\n    <AppContext.Provider\n      value={useMemo(\n        () => ({\n          state,\n          loadLocalStorage,\n          setTheme,\n        }),\n        [state]\n      )}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/scrypt.dcd88edd.png\";","export default __webpack_public_path__ + \"static/media/mode-light.42df9094.svg\";","export default __webpack_public_path__ + \"static/media/mode-dark.faf9339e.svg\";","import React from \"react\"\nimport { useAppContext, Theme } from \"../contexts/AppContext\"\nimport styles from \"./Header.module.css\"\nimport logoLight from \"./scrypt.png\"\nimport logoDark from \"./scrypt.png\"\nimport modeLight from \"./mode-light.svg\"\nimport modeDark from \"./mode-dark.svg\"\n\nfunction Header() {\n  const { state, setTheme } = useAppContext()\n\n  let logo = state.theme == \"dark\" ? logoDark : logoLight\n\n  function onClickTheme(theme: Theme) {\n    setTheme(theme)\n  }\n\n  // NOTE: need to use links for versions so that react-snap can crawl\n  return (\n    <div className={styles.component}>\n      <a href=\"/\">\n        <img src={logo} alt=\"logo\" className={styles.logo} />\n      </a>\n\n      <h3 className={styles.header}>\n        <a href=\"/\">sCrypt by Example</a>\n\n        <div className={styles.versions}>\n          <div className={styles.version}></div>\n        </div>\n      </h3>\n\n      {state.theme == \"dark\" ? (\n        <img\n          src={modeLight}\n          alt=\"light mode\"\n          className={styles.light}\n          onClick={(e) => onClickTheme(\"light\")}\n        />\n      ) : (\n        <img\n          src={modeDark}\n          alt=\"dark mode\"\n          className={styles.dark}\n          onClick={(e) => onClickTheme(\"dark\")}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/telegram.2c6478d9.png\";","export default __webpack_public_path__ + \"static/media/github.5994b25b.png\";","export default __webpack_public_path__ + \"static/media/slack.8c80a788.png\";","export default __webpack_public_path__ + \"static/media/medium.04b8f9d1.png\";","import React from \"react\"\nimport styles from \"./Footer.module.css\"\nimport scrypt from \"./scrypt.png\"\nimport youTube from \"./youtube.svg\"\nimport telegram from \"./telegram.png\"\nimport discord from \"./discord.png\"\nimport github from \"./github.png\"\nimport slack from \"./slack.png\"\nimport medium from \"./medium.png\"\n\n\nfunction Footer() {\n  return (\n    <div className={styles.component}>\n      <div className={styles.row}>\n        <img src={scrypt} alt=\"sCrypt\" className={styles.scrypt} />\n        <a href=\"https://scrypt.io/\" target=\"__blank\">\n          sCrypt - A High-Level Language for Bitcoin Smart Contracts.\n        </a>\n      </div>\n      <div className={styles.social}>\n        <div className={styles.row}>\n          <img src={github} alt=\"github\" className={styles.github} />\n          <a href=\"https://github.com/sCrypt-Inc\" target=\"__blank\">\n            GitHub\n          </a>\n        </div>\n        <div className={styles.row}>\n          <img src={medium} alt=\"medium\" className={styles.medium} />\n          <a href=\"https://medium.com/@xiaohuiliu\" target=\"__blank\">\n            Medium\n          </a>\n        </div>\n        <div className={styles.row}>\n          <img src={slack} alt=\"slack\" className={styles.slack} />\n          <a href=\"https://join.slack.com/t/scryptworkspace/shared_invite/enQtNzQ1OTMyNDk1ODU3LTJmYjE5MGNmNDZhYmYxZWM4ZGY2MTczM2NiNTIxYmFhNTVjNjE5MGYwY2UwNDYxMTQyNGU2NmFkNTY5MmI1MWM\" target=\"__blank\">\n            Slack\n          </a>\n        </div>\n        <div className={styles.row}>\n          <img src={telegram} alt=\"telegram\" className={styles.telegram} />\n          <a href=\"https://t.me/joinchat/GwaRAxKT16JjXyHt5PuhHw\" target=\"__blank\">\n            Telegram\n          </a>\n        </div>\n      </div>\n      <div className={styles.row}>\n        <a href=\"mailto:contact@support@scrypt.io\">\n            support@scrypt.io\n        </a>\n      </div>\n      <div className={styles.row}>\n        <a\n          href=\"https://github.com/sCrypt-Inc/scrypt-by-example.github.io\"\n          target=\"__blank\"\n        >\n          source\n        </a>\n        <div className={styles.bar}>|</div>\n        <a\n          href=\"https://github.com/sCrypt-Inc/scrypt-by-example.github.io/blob/gh-pages/LICENSE\"\n          target=\"__blank\"\n        >\n          license\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport { Helmet } from \"react-helmet\"\n\ninterface Props {\n  title: string\n  description: string\n}\n\nconst SEO: React.FC<Props> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"Description\" content={description} />\n    </Helmet>\n  )\n}\n\nexport default SEO\n","// @ts-ignore\n// import hljs from \"highlight.js/lib/core\"\n// import \"highlight.js/styles/foundation.css\"\n// import \"highlight.js/styles/github-dark.css\"\n// @ts-ignore\n// import hljsDefineSolidity from \"highlightjs-solidity\"\nimport React, { useEffect } from \"react\"\n\n// hljsDefineSolidity(hljs)\n// hljs.initHighlightingOnLoad()\n\ninterface Props {\n  html: string\n}\n\nconst Html: React.FC<Props> = ({ html }) => {\n  // NOTE: to render hightlighs after page load\n  // useEffect(() => {\n  //   document.querySelectorAll(\"pre code\").forEach((block) => {\n  //     hljs.highlightBlock(block)\n  //   })\n  // }, [])\n\n  /* Note: Copy button to render inside pre\n  <div class=\"buttons\">\n    <button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\">\n      <i class=\"tooltiptext\"></i>\n    </button>\n  </div>\n  */\n  useEffect(() => {\n    // Skip creating elements when pre-rendering\n    if (navigator.userAgent === \"ReactSnap\") {\n      return\n    }\n\n    const copy = (target: any) => {\n      const textArea = document.createElement(\"textarea\")\n      textArea.setAttribute(\"style\", \"width:1px;border:0;opacity:0;\")\n      document.body.appendChild(textArea)\n\n      textArea.value = target.innerText\n      textArea.select()\n      document.execCommand(\"copy\")\n\n      document.body.removeChild(textArea)\n    }\n\n    const pres = document.querySelectorAll(\"pre\")\n    pres.forEach((pre) => {\n      // div\n      const div = document.createElement(\"div\")\n      div.className = \"buttons\"\n\n      // button\n      const button = document.createElement(\"button\")\n      button.className = \"fa fa-copy clip-button\"\n      button.title = \"Copy to clipboard\"\n      // @ts-ignore\n      button.ariaLabel = \"Copy to clipboard\"\n\n      const icon = document.createElement(\"i\")\n      icon.className = \"tooltiptext\"\n      button.appendChild(icon)\n\n      div.appendChild(button)\n\n      const code = pre.firstChild\n      pre.insertBefore(div, code)\n\n      // button on click\n      button.addEventListener(\"click\", (e) => {\n        e.preventDefault()\n        // NOTE:\n        // child 0 = <div class=\"buttons\">\n        // child 1 = <code>\n        copy(pre.childNodes[1])\n      })\n    })\n  }, [])\n\n  return <div dangerouslySetInnerHTML={{ __html: html }}></div>\n}\n\nexport default Html\n","import React from \"react\"\nimport SEO from \"./SEO\"\nimport Html from \"./Html\"\nimport styles from \"./Example.module.css\"\n\ninterface Props {\n  title: string\n  description: string\n  version: \"0.1.0\"\n  html: string\n}\n\nconst Example: React.FC<Props> = ({ title, version, description, html }) => {\n  return (\n    <div className={styles.component}>\n      <SEO\n        title={`${title} | sCrypt by Example | ${version}`}\n        description={description}\n      />\n      <div className={styles.content}>\n        <h2>{title}</h2>\n\n        <Html html={html} />\n\n      </div>\n    </div>\n  )\n}\n\nexport default Example\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Access Modifiers\"\nexport const description = \"Access modifiers in sCrypt\"\n\nconst html = `<p>There are three types of access modifiers available to help restrict the scope of properties and functions of a contract:</p>\n<ul>\n<li>Default: no keyword required</li>\n<li>Private</li>\n<li>Public: only applies to functions</li>\n</ul>\n<p>Only public functions can be called externally by Bitcoin transactions.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>default</strong></th>\n<th><strong>private</strong></th>\n<th><strong>public</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Same contract</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Other conract</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>Externally</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Array Types\"\nexport const description = \"Array types in sCrypt\"\n\nconst html = `<p>An array is a fixed-size list of values of the same <em>basic</em> type.</p>\n<h3 id=\"array-literals\">Array literals</h3>\n<pre><code class=\"language-javascript\">bool[<span class=\"hljs-number\">3</span>] b = [<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span> &amp;&amp; <span class=\"hljs-literal\">true</span> || <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span> || (<span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-number\">2</span>)];\nint[<span class=\"hljs-number\">3</span>] c = [<span class=\"hljs-number\">72</span>, -<span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">833</span> * (<span class=\"hljs-number\">99</span> + <span class=\"hljs-number\">9901</span>) + <span class=\"hljs-number\">8888</span>];\nbytes[<span class=\"hljs-number\">3</span>] a = [b<span class=\"hljs-string\">&#x27;ffee&#x27;</span>, b<span class=\"hljs-string\">&#x27;11&#x27;</span>, b<span class=\"hljs-string\">&#x27;22&#x27;</span>];\nint[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] d = [[<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>], [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>]];\n</code></pre>\n<p>Array dimensions can be ommited, when declared:</p>\n<pre><code class=\"language-javascript\">int[] e = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>];\nint[][] f = [[<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>], [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>]];\n</code></pre>\n<h3 id=\"repeat-function\">Repeat function</h3>\n<p>The function <code>T[size] repeat(T e, static const int size)</code> returns an array with all size elements set to <code>e</code>, where <code>T</code> can be any type. Note <code>size</code> must be a compile time constant.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// a == [0, 0, 0]</span>\nint[<span class=\"hljs-number\">3</span>] a = <span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\n\n<span class=\"hljs-comment\">// arr2D == [[0, 0, 0], [0, 0, 0]]</span>\nint[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] arr2D = <span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n\nint[<span class=\"hljs-number\">4</span>] flags = [<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>]\nflags = <span class=\"hljs-title function_\">repeat</span>(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">4</span>);   <span class=\"hljs-comment\">// set all flags to be false</span>\n</code></pre>\n<h3 id=\"index-operator\">Index operator</h3>\n<p>A variable index is allowed when reading from an array:</p>\n<pre><code class=\"language-javascript\">int[<span class=\"hljs-number\">3</span>] a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>];\nint idx = <span class=\"hljs-number\">2</span>;\nint val = a[idx];\n</code></pre>\n<p>An index value, that is out of bounds will cause contract execution to fail immeadiately.</p>\n<p>When writing to an array however, the index operator needs to be a compile-time constant:</p>\n<pre><code class=\"language-javascript\">a[N] = <span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">// N is a CTC</span>\n<span class=\"hljs-comment\">// or</span>\na[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">3</span>;\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Auction\"\nexport const description = \"Auction in sCrypt\"\n\nconst html = `<p>The auction contract implements two public functions:</p>\n<ul>\n<li><code>bid</code> - If a higher bid is found, the current winner is updated and the previous highest bidder is refunded.</li>\n<li><code>close</code> - The auctioneer can close the auction after it expires and take the offer.</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Auction: highest bid before deadline wins</span>\ncontract <span class=\"hljs-title class_\">Auction</span> {\n    @state\n    <span class=\"hljs-title class_\">Ripemd160</span> bidder;\n\n    <span class=\"hljs-title class_\">PubKey</span> auctioner;\n    int auctionDeadline;\n\n    <span class=\"hljs-comment\">// bid with a higher offer</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bid</span>(<span class=\"hljs-params\">Ripemd160 bidder, int bid, int changeSats, SigHashPreimage txPreimage</span>) {\n        int highestBid = <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">value</span>(txPreimage);\n        <span class=\"hljs-built_in\">require</span>(bid &gt; highestBid);\n\n        <span class=\"hljs-title class_\">Ripemd160</span> highestBidder = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bidder</span>;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bidder</span> = bidder;\n\n        <span class=\"hljs-comment\">// auction continues with a higher bidder</span>\n        bytes stateScript = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getStateScript</span>();\n        bytes auctionOutput = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(stateScript, bid);\n\n        <span class=\"hljs-comment\">// refund previous highest bidder</span>\n        bytes refundScript = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildPublicKeyHashScript</span>(highestBidder);\n        bytes refundOutput = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(refundScript, highestBid);\n\n        bytes changeScript = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildPublicKeyHashScript</span>(bidder);\n        bytes changeOutput = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(changeScript, changeSats);\n\n        bytes output = auctionOutput + refundOutput + changeOutput;\n\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">propagateState</span>(txPreimage, output));\n    }\n\n    <span class=\"hljs-comment\">// withdraw after bidding is over</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">close</span>(<span class=\"hljs-params\">Sig sig, SigHashPreimage txPreimage</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimage</span>(txPreimage));\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">nLocktime</span>(txPreimage) &gt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">auctionDeadline</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">auctioner</span>));\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">propagateState</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, bytes outputs</span>) : bool {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimage</span>(txPreimage));\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title function_\">hash256</span>(outputs) == <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">hashOutputs</span>(txPreimage));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Basic Types\"\nexport const description = \"Basic types in sCrypt\"\n\nconst html = `<p>sCrypt supports the following basic types:</p>\n<ul>\n<li><code>bool</code> - a boolean value <code>true</code> or <code>false</code>,</li>\n<li><code>int</code> - a signed integer of arbitrary length, whose literals are in decimal or hexadecimal format:<pre><code class=\"language-javascript\">int a1 = <span class=\"hljs-number\">42</span>;\nint a2 = -<span class=\"hljs-number\">4242424242424242</span>;\nint a3 = <span class=\"hljs-number\">55066263022277343669578718895168534326250603453777594175500187360389116729240</span>;\nint a4 = <span class=\"hljs-number\">0xFF8C</span>;\nint a5 = <span class=\"hljs-number\">0xff8c</span>;\n</code></pre>\n</li>\n<li><code>bytes</code> -  a variable length array of bytes, whose literals are in quoted hexadecimal format prefixed by <code>b</code>:<pre><code class=\"language-javascript\">bytes b1 = b<span class=\"hljs-string\">&#x27;ffee1234&#x27;</span>;\nbytes b2 = b<span class=\"hljs-string\">&#x27;414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00&#x27;</span>;\nbytes b3 = b<span class=\"hljs-string\">&#x27;1122&#x27;</span> + b<span class=\"hljs-string\">&#x27;eeff&#x27;</span>; <span class=\"hljs-comment\">// b3 is b&#x27;1122eeff&#x27;</span>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"domain-subtypes\">Domain subtypes</h2>\n<p>sCrypt has several subtypes, specific to the Bitcoin context, used to further improve type safety.</p>\n<h3 id=\"subtypes-of-bytes\">Subtypes of <code>bytes</code></h3>\n<ul>\n<li><p><code>PubKey</code> - an EC public key in compressed format (33 bytes):</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">PubKey</span> pubKey = <span class=\"hljs-title class_\">PubKey</span>(b<span class=\"hljs-string\">&#x27;0200112233445566778899aabbccddeeffffeeddccbbaa99887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Sig</code> - an EC signature in DER format with SIGHASH flag appended at the end (0x41 - in the below example, which means <code>SIGHASH_ALL | SIGHASH_FORKID</code>):</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Sig</span> sig = <span class=\"hljs-title class_\">Sig</span>(b<span class=\"hljs-string\">&#x27;3045022100b71be3f1dc001e0a1ad65ed84e7a5a0bfe48325f2146ca1d677cf15e96e8b80302206d74605e8234eae3d4980fcd7b2fdc1c5b9374f0ce71dea38707fccdbd28cf7e41&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Ripemd160</code> - a RIPEMD-160 hash type:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Ripemd160</span> r = <span class=\"hljs-title class_\">Ripemd160</span>(b<span class=\"hljs-string\">&#x27;0011223344556677889999887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Sha1</code> - a SHA-1 hash type:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Sha1</span> s = <span class=\"hljs-title class_\">Sha1</span>(b<span class=\"hljs-string\">&#x27;0011223344556677889999887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>Sha256</code> - a SHA-256 hash type:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Sha256</span> s = <span class=\"hljs-title class_\">Sha256</span>(b<span class=\"hljs-string\">&#x27;00112233445566778899aabbccddeeffffeeddccbbaa99887766554433221100&#x27;</span>);\n</code></pre>\n</li>\n<li><p><code>SigHashType</code> - a sighash type / flag.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">SigHashType</span> s = <span class=\"hljs-title class_\">SigHashType</span>(b<span class=\"hljs-string\">&#x27;01&#x27;</span>);\n<span class=\"hljs-title class_\">SigHashType</span> s = <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">ALL</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">ANYONECANPAY</span>;\n</code></pre>\n</li>\n<li><p><code>SigHashPreimage</code> - a sighash preimage.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">SigHashPreimage</span> s = <span class=\"hljs-title class_\">SigHashPreimage</span>(b<span class=\"hljs-string\">&#x27;0100000028bcef7e73248aa273db19d73&#x27;</span>);\n</code></pre>\n</li>\n</ul>\n<h3 id=\"subtypes-of-int\">Subtypes of <code>int</code></h3>\n<ul>\n<li><code>PrivKey</code> - an EC private key.<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">PrivKey</span> privKey = <span class=\"hljs-title class_\">PrivKey</span>(<span class=\"hljs-number\">0x00112233445566778899aabbccddeeffffeeddccbbaa99887766554433221100</span>);\n</code></pre>\n</li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Code Seperator\"\nexport const description = \"Code seperator in sCrypt\"\n\nconst html = `<p>Three or more consecutive <code>*</code> in a line insert an <a href=\"https://wiki.bitcoinsv.io/index.php/OP_CODESEPARATOR\">OP_CODESEPARATOR</a>. It is used to exclude what comes before (and including itself) it from being part of the signature.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-variable constant_\">P2PKH_OCS</span> {\n    <span class=\"hljs-title class_\">Ripemd160</span> pubKeyHash;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unlock</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey</span>) {\n        <span class=\"hljs-comment\">// code separator 1</span>\n        ***\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">hash160</span>(pubKey) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pubKeyHash</span>);\n        <span class=\"hljs-comment\">// code separator 2</span>\n        *****\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, pubKey));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Fair Coin Toss\"\nexport const description = \"Fair coin toss in sCrypt\"\n\nconst html = `<p>Alice and Bob decide to flip a coin, but they have no physical coin or they want to do it over the Internet. They can achieve fair coin tossing by following protocol on Bitcoin.</p>\n<ol>\n<li>Alice and Bob each locks X bitcoins in a smart contract shown below.</li>\n<li>They both reveal their secret number, which are XOR’d to determine if the coins lands on head or tail. Alice wins if it is head, otherwise Bob wins. Whoever wins takes all 2X bitcoins.</li>\n</ol>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">CoinToss</span> {\n\n    <span class=\"hljs-title class_\">PubKey</span> alice;\n    <span class=\"hljs-title class_\">PubKey</span> bob;\n    <span class=\"hljs-comment\">// commitments</span>\n    <span class=\"hljs-title class_\">Sha256</span> aliceHash;\n    <span class=\"hljs-title class_\">Sha256</span> bobHash;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toss</span>(<span class=\"hljs-params\">bytes aliceNonce, bytes bobNonce, Sig sig</span>) {\n        <span class=\"hljs-comment\">// nonce can be of any length, as long as it&#x27;s resistant from brute-force attack</span>\n        <span class=\"hljs-comment\">// We use 256 bits / 32 bytes as an example here</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">len</span>(aliceNonce) == <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">hash256</span>(aliceNonce) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">aliceHash</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">len</span>(bobNonce) == <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">hash256</span>(bobNonce) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bobHash</span>);\n        \n        <span class=\"hljs-comment\">// last bit of XOR</span>\n        bytes head = (aliceNonce ^ bobNonce) &amp; b<span class=\"hljs-string\">&#x27;0000000000000000000000000000000000000000000000000000000000000001&#x27;</span>;\n\n        <span class=\"hljs-comment\">// head -&gt; Alice wins; tail -&gt; Bob wins</span>\n        <span class=\"hljs-title class_\">PubKey</span> winner = head ? <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">alice</span> : <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bob</span>;\n\n        <span class=\"hljs-comment\">// winner takes all</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, winner));\n    }\n\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Const Variables\"\nexport const description = \"Const variables in sCrypt\"\n\nconst html = `<p>Variables declared const cannot be changed once initialized.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Test</span> {\n    <span class=\"hljs-keyword\">const</span> int x;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">int x</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = x; <span class=\"hljs-comment\">// good, since this is initialization</span>\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> int y</span>) {\n        y = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// &lt;-- error</span>\n\n        <span class=\"hljs-keyword\">const</span> int a = <span class=\"hljs-number\">36</span>;\n        a = <span class=\"hljs-number\">11</span>; <span class=\"hljs-comment\">// &lt;-- error</span>\n\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Constructor\"\nexport const description = \"Constructors in sCrypt\"\n\nconst html = `<p>We can define a constructor in order to store variables in a contract (locking script).</p>\n<p>The constructor can be defined implicitly:</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Test</span> {\n    int x1;\n    bytes x2;\n    bool x3;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-params\">int y</span>) {...}\n}\n</code></pre>\n<p>or explicitly:</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Test</span> {\n    int x1;\n    bytes x2;\n    bool x3;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">int x1, bytes x2, bool x3</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x1</span> = x1;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x2</span> = x2;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x3</span> = x3;\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-params\">int y</span>) {...}\n}\n</code></pre>\n<p>Both examples are functionally equivalent.</p>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Functions\"\nexport const description = \"Functions in sCrypt\"\n\nconst html = `<p>sCrypt enables developers to define their own functions as exemplified below:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">int a, int b</span>): int {\n    <span class=\"hljs-keyword\">return</span> a + b;\n}\n</code></pre>\n<p>They are only visible within the contract, similar to <code>private</code> functions in Solidity.</p>\n<p>Every function must end with a <code>return</code> statement. Recursion is disallowed. A function cannot call itself in its body, either directly or indirectly.</p>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"ECDSA-based Oracles\"\nexport const description = \"ECDSA-based oracles in sCrypt\"\n\nconst html = `<p><strong>P</strong> and <strong>p</strong> denote an oracle’s public and private key, respectively. We first hash the data to be signed. The result is added with <strong>p</strong>, yielding a new private key <strong>p’</strong>.</p>\n<blockquote>\n<p>x = sha256(data)\np’ = p + x</p>\n</blockquote>\n<p>The corresponding public key, <strong>P’</strong>, can be derived as follows:</p>\n<blockquote>\n<p>P’ = p’ * G = (p + x) * G = P + x * G</p>\n</blockquote>\n<p>The oracle uses the derived private key <strong>p’</strong> to sign, instead of the original <strong>p</strong>. Since only the oracle knows <strong>p</strong>, only he knows <strong>p’</strong> and can use it to sign against <strong>P’</strong>. To calculate <strong>P’</strong> in a contract, we need to calculate <strong>X = x * G</strong> and then add the result with <strong>P</strong>.</p>\n<p>In order to verify the correct public key sum efficiently, we also pass <strong>lambda</strong>, which is the gradient between <strong>P</strong> and <strong>X</strong>:</p>\n<blockquote>\n<p>n - secp256k1 curve order (often also denoted as p)</p>\n</blockquote>\n<blockquote>\n<p>lambda = ((Xy - Py) / (Xx - Px)) % n</p>\n</blockquote>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"ec.scrypt\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"util.scrypt\"</span>;\n\n\nlibrary <span class=\"hljs-title class_\">Oracle</span> {\n\n    <span class=\"hljs-comment\">// Verify data is signed by the oracle with given public key.</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">verifyData</span>(<span class=\"hljs-params\">bytes data, \n                               Sig sig,\n                               PubKey P,\n                               PubKey derP,\n                               PubKey X,\n                               int lambda,\n                               SigHashPreimage txPreimage</span>) : bool {\n        <span class=\"hljs-comment\">// sha256 data</span>\n        bytes hash = <span class=\"hljs-title function_\">sha256</span>(data);\n\n        <span class=\"hljs-title class_\">PrivKey</span> x = <span class=\"hljs-title class_\">PrivKey</span>(<span class=\"hljs-title class_\">Util</span>.<span class=\"hljs-title function_\">fromLEUnsigned</span>(hash));\n\n        <span class=\"hljs-comment\">// verify X = x * G?</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimageAdvanced</span>(txPreimage, x, X, <span class=\"hljs-title class_\">Util</span>.<span class=\"hljs-property\">invK</span>, <span class=\"hljs-title class_\">Util</span>.<span class=\"hljs-property\">r</span>, <span class=\"hljs-title class_\">Util</span>.<span class=\"hljs-property\">rBigEndian</span>, <span class=\"hljs-title class_\">SigHashType</span>(<span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">ALL</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">FORKID</span>)));\n\n        <span class=\"hljs-comment\">// verify P&#x27; = P + X</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-title function_\">isPubKeySum</span>(P, X, lambda, derP));\n\n        <span class=\"hljs-comment\">// verify signature is from oracle, who knows p&#x27; = p + x</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">checkSig</span>(sig, derP);\n\n    }\n\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Exit Function\"\nexport const description = \"Exit function in sCrypt\"\n\nconst html = `<p><code>exit(bool status)</code> terminates contract execution. If status is <code>true</code>, the contract succeeds; otherwise, it fails.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">TestPositiveEqual</span> {\n    int x;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">int x</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span> = x;\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-keyword\">if</span> (y &lt;= <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-literal\">true</span>);\n        }\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Generic Types\"\nexport const description = \"Generic types in sCrypt\"\n\nconst html = `<p>A generic type is a parameterized type. It allows a library to work over a variety of types rather than a single one. Users can consume these libraries and use their own concrete types.</p>\n<p>Generic types can only be declared at library level and used within the library’s scope.</p>\n<pre><code class=\"language-javascript\">library <span class=\"hljs-title class_\">HashedMap</span>&lt;K, V&gt; {\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">K k, V v, int idx</span>) {\n    ...\n  }\n\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">HashedMap</span>&lt;bytes, int&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashedMap</span>();\nmap.<span class=\"hljs-title function_\">set</span>(b<span class=\"hljs-string\">&#x27;01&#x27;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Conway's Game of Life\"\nexport const description = \"Conway's Game of Life in sCrypt\"\n\nconst html = `<p>Rules:</p>\n<ol>\n<li>Any live cell with fewer than two live neighbours dies, as if by needs caused by underpopulation.</li>\n<li>Any live cell with more than three live neighbours dies, as if by overcrowding.</li>\n<li>Any live cell with two or three live neighbours lives, unchanged, to the next generation.</li>\n<li>Any dead cell with exactly three live neighbours cells will come to life.</li>\n</ol>\n<p>The generation of the game is stored as the <a href=\"https://by-example.scrypt.io/stateful-contract/\">state</a> of the contract.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"arrayUtil.scrypt\"</span>;\n\n<span class=\"hljs-comment\">// Conway Game Of Life on a board of N * N</span>\ncontract <span class=\"hljs-title class_\">GameOfLife</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int N = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-comment\">// effctively we play on a grid of (N+2) * (N+2) without handling boundary cells</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">BOARD_SIZE</span> = <span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-property\">N</span> + <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-comment\">//static const int XY = BOARD_SIZE * BOARD_SIZE;  &lt;- error: invalid array size when run #serializeState</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">XY</span> = <span class=\"hljs-number\">49</span>; \n    <span class=\"hljs-keyword\">static</span> int <span class=\"hljs-variable constant_\">LIVE</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">static</span> int <span class=\"hljs-variable constant_\">DEAD</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">LOOP_NEIGHBORS</span> = <span class=\"hljs-number\">3</span>;\n\n    @state\n    int[<span class=\"hljs-variable constant_\">XY</span>] board;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">play</span>(<span class=\"hljs-params\">int amount, SigHashPreimage txPreimage</span>) {\n        <span class=\"hljs-comment\">// make the move</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span> = <span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-title function_\">evolve</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>);\n\n        <span class=\"hljs-comment\">// update state: next turn &amp; next board</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">propagateState</span>(txPreimage, amount));\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">evolve</span>(<span class=\"hljs-params\">int[XY] oldBoard</span>) : int[<span class=\"hljs-variable constant_\">XY</span>] {\n        int[<span class=\"hljs-variable constant_\">XY</span>] newBoard = oldBoard;\n\n        int i = <span class=\"hljs-number\">1</span>;\n        loop (<span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-property\">N</span>) {\n            int j = <span class=\"hljs-number\">1</span>;\n            loop (<span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-property\">N</span>) {\n                int nextState = <span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-title function_\">next</span>(oldBoard, i, j);\n                newBoard[<span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-title function_\">index</span>(i, j)] = nextState;\n                \n                j++;\n            }\n\n            i++;\n        }\n\n        <span class=\"hljs-keyword\">return</span> newBoard;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\">int[XY] oldBoard, int row, int col</span>) : int {\n        <span class=\"hljs-comment\">// number of neighbors alive</span>\n        int alive = <span class=\"hljs-number\">0</span>;\n\n        int i = -<span class=\"hljs-number\">1</span>;\n        loop (<span class=\"hljs-variable constant_\">LOOP_NEIGHBORS</span>) {\n            int j = -<span class=\"hljs-number\">1</span>;\n\n            loop (<span class=\"hljs-variable constant_\">LOOP_NEIGHBORS</span>) {\n                <span class=\"hljs-keyword\">if</span> (!(i == <span class=\"hljs-number\">0</span> &amp;&amp; j == <span class=\"hljs-number\">0</span>)) {\n                    <span class=\"hljs-keyword\">if</span> (oldBoard[<span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-title function_\">index</span>(row + i, col + j)]) {\n                        alive++;\n                    }\n                }\n                j++;\n            }\n\n            i++;\n        }\n\n        int oldState = oldBoard[<span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-title function_\">index</span>(row, col)];\n        <span class=\"hljs-comment\">/* rule\n        1. Any live cell with two or three live neighbours survives.\n        2. Any dead cell with three live neighbours becomes a live cell.\n        3. All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n        */</span>\n        <span class=\"hljs-keyword\">return</span> (alive == <span class=\"hljs-number\">3</span> || alive == <span class=\"hljs-number\">2</span> &amp;&amp; oldState == <span class=\"hljs-variable constant_\">LIVE</span>) ? <span class=\"hljs-variable constant_\">LIVE</span> : <span class=\"hljs-variable constant_\">DEAD</span>;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">index</span>(<span class=\"hljs-params\">int i, int j</span>) : int {\n        <span class=\"hljs-keyword\">return</span> i * <span class=\"hljs-title class_\">GameOfLife</span>.<span class=\"hljs-property\">BOARD_SIZE</span> + j;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">propagateState</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, int value</span>) : bool {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimage</span>(txPreimage));\n        bytes outputScript = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getStateScript</span>();\n        bytes output = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(outputScript, value);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hash256</span>(output) == <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">hashOutputs</span>(txPreimage);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Hello World\"\nexport const description = \"Hello world in sCrypt\"\n\nconst html = `<p>The following is a simple contract written in sCrypt. It takes an integer <code>x</code> as a parameter for the constructor.\nIt exposes a single public function <code>equals</code>, which checks if the passed parameter is equal to <code>x</code>.\nOn a lower level this means, that we need to include an integer <code>y</code> in the unlocking script, that unlocks the output containing our smart contract (which stores <code>x</code>).</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">HelloWorld</span> {\n    int x;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equals</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"If / Else\"\nexport const description = \"If / else statement in sCrypt\"\n\nconst html = `<p>An <code>if</code> statement can take a value of <code>bool</code>, <code>ìnt</code> or <code>bytes</code>. An <code>int</code> value is interpreted to be <code>false</code> if and only if it equals <code>0</code>. A <code>bytes</code> value is interpreted as <code>false</code> if and only if every byte of its value equals <code>b&#39;00&#39;</code>. That includes empty <code>bytes</code> (<code>b&#39;&#39;</code>).</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// Can be either:</span>\nbool cond = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-comment\">// or:</span>\nbytes cond = b<span class=\"hljs-string\">&#x27;01&#x27;</span>;\n<span class=\"hljs-comment\">// or:</span>\nint cond = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-keyword\">if</span> (cond) {\n    ...\n} <span class=\"hljs-keyword\">else</span> {\n    ...\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Import\"\nexport const description = \"Import statement in sCrypt\"\n\nconst html = `<p>If we don&#39;t wan&#39;t to store multiple contracts, properties or libraries in the same file, we can split them up into many and use the <code>import</code> statement.</p>\n<p><em>hashPuzzle.scrypt</em>:</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">HashPuzzle</span> {\n    <span class=\"hljs-title class_\">Ripemd160</span> hash;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">spend</span>(<span class=\"hljs-params\">bytes preimage</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">hash160</span>(preimage) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hash</span>);\n    }\n}\n</code></pre>\n<p><em>p2pk.scrypt</em>:</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Pay2PubKey</span> {\n    <span class=\"hljs-title class_\">PubKey</span> pubKey;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">spend</span>(<span class=\"hljs-params\">Sig sig</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pubKey</span>));\n    }\n}\n</code></pre>\n<p><em>p2pkh.scrypt</em>:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./hashPuzzle.scrypt\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./p2pk.scrypt\"</span>;\n\ncontract <span class=\"hljs-title class_\">Pay2PubKeyHash</span> {\n    <span class=\"hljs-title class_\">Ripemd160</span> pubKeyHash;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">spend</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey</span>) {\n        <span class=\"hljs-title class_\">HashPuzzle</span> hp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashPuzzle</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pubKeyHash</span>);\n        <span class=\"hljs-built_in\">require</span>(hp.<span class=\"hljs-title function_\">spend</span>(pubKey));\n\n        <span class=\"hljs-title class_\">Pay2PubKey</span> p2pk = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Pay2PubKey</span>(pubKey);\n        <span class=\"hljs-built_in\">require</span>(p2pk.<span class=\"hljs-title function_\">spend</span>(sig));\n    }\n}\n</code></pre>\n<p><a href=\"https://scryptdoc.readthedocs.io/en/latest/contracts.html?highlight=import#id1\">Standard libraries</a> don&#39;t need to be imported explicitly.</p>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Inline Assembly\"\nexport const description = \"Inline assembly in sCrypt\"\n\nconst html = `<p>Script can be embedded directly into sCrypt source code using assembly representation. An sCrypt function can be written in Script and called like a regular sCrypt function.</p>\n<p>For a function to be written in Script, its entire body must be enclosed by an <code>asm</code> block. Function parameters are on top of the stack, in reverse order as declared.</p>\n<p>An example that emulates the behaviour of a regular P2PKH is shown below:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">p2pkh</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey</span>): bool {\n    asm {\n        op_dup\n        op_hash160\n        $pkh\n        op_equalverify\n        op_checksig\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Library\"\nexport const description = \"Libraries in sCrypt\"\n\nconst html = `<p>A library is the same with a contract, except it does not contain any public function. It is only intended to be imported by a contract or other libraries. It thus cannot be independently deployed and called. It is frequently used to group related constants and static functions.</p>\n<pre><code class=\"language-javascript\">library <span class=\"hljs-title class_\">Util</span> {\n    <span class=\"hljs-comment\">// number of bytes to denote some numeric value</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-title class_\">DataLen</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-comment\">// number of bytes to denote length serialized state, including varint prefix (1 byte) + length (2 bytes), change length to 4 when you need PushData4</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-title class_\">StateLen</span> = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-comment\">// convert signed integer \"n\" to unsigned integer of \"l\" bytes, in little endian</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toLEUnsigned</span>(<span class=\"hljs-params\">int n, int l</span>): bytes {\n        <span class=\"hljs-comment\">// one extra byte to accommodate possible negative sign byte</span>\n        bytes m = <span class=\"hljs-title function_\">num2bin</span>(n, l + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">// remove sign byte</span>\n        <span class=\"hljs-keyword\">return</span> m[<span class=\"hljs-number\">0</span> : <span class=\"hljs-title function_\">len</span>(m) - <span class=\"hljs-number\">1</span>];\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Loops\"\nexport const description = \"Loops in sCrypt\"\n\nconst html = `<p>sCrypt allows looping by repeating the loop body a specified number of times. For example, the loop</p>\n<pre><code class=\"language-javascript\">loop (<span class=\"hljs-number\">10</span>) {\n    x = x * <span class=\"hljs-number\">2</span>;\n}\n</code></pre>\n<p>gets unrolled to</p>\n<pre><code class=\"language-javascript\">x = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\nx = x * <span class=\"hljs-number\">2</span>;\n</code></pre>\n<p>Because loop unrolling is done at compile time, the loop count must be a compile time constant.</p>\n<p>We can also access the loop index by defining an induction variable:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// int[3][4] matrix;</span>\nloop (<span class=\"hljs-number\">3</span>) : i {\n    loop (<span class=\"hljs-number\">4</span>) : j {\n        matrix[i][j] = i + j;\n    }\n}\n</code></pre>\n<p>Loops in sCrypt do not support a break statement, but we can simulate one using conditionals:</p>\n<pre><code class=\"language-javascript\">bool done = <span class=\"hljs-literal\">false</span>;\nloop (<span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-keyword\">if</span> (!done) {\n        x = x * <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">8</span>) {\n            done = <span class=\"hljs-literal\">true</span>;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Multiparty Hash Puzzles\"\nexport const description = \"Multiparty hash puzzles in sCrypt\"\n\nconst html = `<p>In a hash puzzle contract, the spender has to provide a preimage <code>x</code> that hashes to a predefined value <code>y</code> to unlock a UTXO. It can be\nextended to multiple parties so that multiple preimages have to be provided such that <code>y1 = H(x1)</code>, <code>y2 = H(x2)</code>, ..., <code>yN = H(xN)</code>. Below shows an examples of three parties.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">MultiPartyHashPuzzles</span> {\n    <span class=\"hljs-title class_\">Sha256</span> hash1;   <span class=\"hljs-comment\">// hash1 = b&#x27;136523B9FEA2B7321817B28E254A81A683D319D715CEE2360D051360A272DD4C&#x27;</span>\n    <span class=\"hljs-title class_\">Sha256</span> hash2;   <span class=\"hljs-comment\">// hash2 = b&#x27;E222E30CF5C982E5F6251D755B0B16F608ACE631EB3BA9BDAF624FF1651ABF98&#x27;</span>\n    <span class=\"hljs-title class_\">Sha256</span> hash3;   <span class=\"hljs-comment\">// hash3 = b&#x27;2A79F5D9F8B3770A59F91E0E9B4C379F7C7A32353AA6450065E43A8616EF5722&#x27;</span>\n    \n    <span class=\"hljs-comment\">// preimage1: e.g., \"bsv\" -&gt; b&#x27;627376&#x27;</span>\n    <span class=\"hljs-comment\">// preimage2: e.g., \"sCrypt\" -&gt; b&#x27;734372797074&#x27;</span>\n    <span class=\"hljs-comment\">// preimage3: e.g., \"IDE\" -&gt; b&#x27;494445&#x27;</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unlock</span>(<span class=\"hljs-params\">bytes preimage1, bytes preimage2, bytes preimage3</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">sha256</span>(preimage1) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hash1</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">sha256</span>(preimage2) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hash2</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">sha256</span>(preimage3) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hash3</span>);\n    }\n}\n</code></pre>\n<p>The above solution is problematic when <code>N</code> is large since all <code>N</code> hashes have to be included in the locking script, bloating the transaction. \nInstead, we can combine all <code>y</code>&#39;s into a single y such that <code>y = H(H(y1 || y2) || y3)</code> as shown below.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">MultiPartyHashPuzzlesCompact</span> {\n    <span class=\"hljs-comment\">// only 1 hash needs to go into the locking script, saving space</span>\n    <span class=\"hljs-title class_\">Sha256</span> combinedHash; <span class=\"hljs-comment\">// combinedHash = b&#x27;C9392767AB23CEFF09D207B9223C0C26F01A7F81F8C187A821A4266F8020064D&#x27;</span>\n\n    <span class=\"hljs-comment\">// preimage1: e.g., \"bsv\" -&gt; b&#x27;627376&#x27;</span>\n    <span class=\"hljs-comment\">// preimage2: e.g., \"sCrypt\" -&gt; b&#x27;734372797074&#x27;</span>\n    <span class=\"hljs-comment\">// preimage3: e.g., \"IDE\" -&gt; b&#x27;494445&#x27;</span>\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unlock</span>(<span class=\"hljs-params\">bytes preimage1, bytes preimage2, bytes preimage3</span>) {\n        <span class=\"hljs-title class_\">Sha256</span> hash1 = <span class=\"hljs-title function_\">sha256</span>(preimage1);\n        <span class=\"hljs-title class_\">Sha256</span> hash2 = <span class=\"hljs-title function_\">sha256</span>(preimage2);\n        <span class=\"hljs-title class_\">Sha256</span> hash3 = <span class=\"hljs-title function_\">sha256</span>(preimage3);\n        <span class=\"hljs-title class_\">Sha256</span> hash12 = <span class=\"hljs-title function_\">sha256</span>(hash1 + hash2);\n        <span class=\"hljs-title class_\">Sha256</span> hash123 = <span class=\"hljs-title function_\">sha256</span>(hash12 + hash3);\n\n        <span class=\"hljs-built_in\">require</span>(hash123 == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">combinedHash</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Operators\"\nexport const description = \"Operators in sCrypt\"\n\nconst html = `<table>\n<thead>\n<tr>\n<th><strong>Precedence</strong></th>\n<th><strong>Operators</strong></th>\n<th><strong>Associativity</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><code>- ! ~</code></td>\n<td>right</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>* / %</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>+ -</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>&lt;&lt; &gt;&gt;</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>5</td>\n<td><code>&lt; &lt;= &gt; &gt;=</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>6</td>\n<td><code>== !=</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>7</td>\n<td><code>&amp;</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code>^</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>9</td>\n<td><code>|</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>10</td>\n<td><code>&amp;&amp;</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>11</td>\n<td><code>||</code></td>\n<td>left</td>\n</tr>\n<tr>\n<td>12</td>\n<td><code>? :</code></td>\n<td>right</td>\n</tr>\n</tbody></table>\n<p>Operators <code>&amp;&amp;</code>, <code>||</code>, and <code>? :</code> use <a href=\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\">short-circuit evaluation</a>.</p>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"P2PKH\"\nexport const description = \"Pay to Public Key Hash (P2PKH) in sCrypt\"\n\nconst html = `<p>Pay-to-PubKey-Hash (<a href=\"https://learnmeabitcoin.com/guide/p2pkh\">P2PKH</a>) contract is used to send bitcoins to a bitcoin address. It is the most common contract on the Bitcoin network. Such contracts are unlocked by the public key and a signature created by the corresponding private key.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-variable constant_\">P2PKH</span> {\n    <span class=\"hljs-title class_\">Ripemd160</span> pubKeyHash;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unlock</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">hash160</span>(pubKey) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pubKeyHash</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, pubKey));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Public Function\"\nexport const description = \"Public functions in sCrypt\"\n\nconst html = `<p>A public function is a function, that get&#39;s invoked by an unlocking script. The body of the function corresponds to the locking script of the contract and the functions arguments to the unlocking script. A contract must have at least one public function.</p>\n<p>Public functions don&#39;t return any value and must end with a call to <code>require()</code>. If all calls to <code>require()</code> inside the function evaluate as true, then the contract can be redeemed.</p>\n<p>A public function can be regarded as a mathematical boolean function. <code>f</code> is the function body and <code>x</code> the function arguments. A contract call succeeds if and only if <code>f(x)</code> returns true.</p>\n<h2 id=\"multiple-public-functions\">Multiple Public Functions</h2>\n<p>A contract can have multiple public functions, representing different ways to fulfill a contract. Only one of the public functions can be called at a time. In this case, the last operator of  the unlocking script has to be the index of the public function called, starting from <code>0</code>. For example, if public function <code>larger</code> is called, unlocking script of <code>y 2</code> can fulfill the contract below, in which 2 is the public function index.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Test</span> {\n    int x;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">smaller</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-built_in\">require</span>(y &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">larger</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-built_in\">require</span>(y &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"R-Puzzle\"\nexport const description = \"R-Puzzle contract in sCrypt\"\n\nconst html = `<p>In a <a href=\"https://wiki.bitcoinsv.io/index.php/R-Puzzles\">R-Puzzle</a>, an ephemeral key <code>k</code> is never revealed. Instead <code>r</code>, which is the x-coordinate of its corresponding public key, is revealed and from <code>r</code> along with the signature, the knowledge of <code>k</code> can be proven using <code>checkSig()</code>.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">RPuzzle</span> {\n    <span class=\"hljs-title class_\">Ripemd160</span> rhash;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">Ripemd160 rhash</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rhash</span> = rhash;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getSigR</span>(<span class=\"hljs-params\">Sig sigr</span>): bytes {\n        bytes lenBytes = sigr[<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">4</span>];\n        int len = <span class=\"hljs-title function_\">unpack</span>(lenBytes);\n        bytes r = sigr[<span class=\"hljs-number\">4</span>:<span class=\"hljs-number\">4</span>+len];\n        <span class=\"hljs-keyword\">return</span> r;\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unlock</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey, Sig sigr</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rhash</span> == <span class=\"hljs-title function_\">hash160</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getSigR</span>(sigr)));\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sigr, pubKey));\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, pubKey));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Rabin Signatures\"\nexport const description = \"Rabin signatures in sCrypt\"\n\nconst html = `<p>A <a href=\"https://en.wikipedia.org/wiki/Rabin_signature_algorithm\">Rabin signature</a> is an alternative form of digital signature to ECDSA used in Bitcoin. It allows for efficient on-chain signature verification and is often used for signing and verifying oracle data.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">RabinSignature</span> {\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">verifySig</span>(<span class=\"hljs-params\">int sig, bytes msg, bytes padding, int n</span>) {\n        int h = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">fromLEUnsigned</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">hash</span>(msg + padding));\n        <span class=\"hljs-built_in\">require</span>((sig * sig) % n == h % n);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hash</span>(<span class=\"hljs-params\">bytes x</span>): bytes {\n        <span class=\"hljs-comment\">// expand into 512 bit hash</span>\n        bytes hx = <span class=\"hljs-title function_\">sha256</span>(x);\n        int idx = <span class=\"hljs-title function_\">len</span>(hx) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">sha256</span>(hx[:idx]) + <span class=\"hljs-title function_\">sha256</span>(hx[<span class=\"hljs-attr\">idx</span>:]);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fromLEUnsigned</span>(<span class=\"hljs-params\">bytes b</span>): int {\n        <span class=\"hljs-comment\">// append positive sign byte. This does not hurt even when sign bit is already positive</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">unpack</span>(b + b<span class=\"hljs-string\">&#x27;00&#x27;</span>);\n    }\n\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Require\"\nexport const description = \"Require function in sCrypt\"\n\nconst html = `<p>The <code>require()</code> function specifies terms/conditions of a contract. It consumes a boolean condition. If the condition is not met, the contract will abort execution and fail. Otherwise, the execution will resume.</p>\n<p>Every public function must end with a <code>require()</code> call.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Test</span> {\n    int x;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">equal</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">x</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Rule 110\"\nexport const description = \"Rule 110 in sCrypt\"\n\nconst html = `<p>The Rule 110 cellular automaton is a 1-dimensional elementary CA, where a linear pattern of 0s and 1s evolves according to a simple set of rules. Whether a point in the pattern will be 0 or 1 in the new generation depends on its current value and on those of its two neighbors. The Rule 110 has the following set of rules:</p>\n<table>\n<thead>\n<tr>\n<th>Current pattern</th>\n<th>111</th>\n<th>110</th>\n<th>101</th>\n<th>100</th>\n<th>011</th>\n<th>010</th>\n<th>001</th>\n<th>000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>New state for center cell</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<pre><code class=\"language-javascript\">contract rule110 {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int N = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">//size of board</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">N2</span> = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">//size of board</span>\n    <span class=\"hljs-keyword\">static</span> bytes <span class=\"hljs-variable constant_\">LIVE</span> = b<span class=\"hljs-string\">&#x27;01&#x27;</span>;\n    <span class=\"hljs-keyword\">static</span> bytes <span class=\"hljs-variable constant_\">DEAD</span> = b<span class=\"hljs-string\">&#x27;00&#x27;</span>;\n\n    @state\n    bytes board;\n    \n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">play</span>(<span class=\"hljs-params\">int amount, SigHashPreimage txPreimage</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">computeNewBoard</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">propagateState</span>(txPreimage, amount));\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">computeNewBoard</span>(<span class=\"hljs-params\">bytes board</span>) : bytes {\n        bytes res = b<span class=\"hljs-string\">&#x27;&#x27;</span>;\n        res += <span class=\"hljs-variable constant_\">DEAD</span>;\n        loop (<span class=\"hljs-variable constant_\">N2</span>) : i {\n            res += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">newState</span>(board[i : i + <span class=\"hljs-number\">3</span>]);\n        }\n        res += <span class=\"hljs-variable constant_\">DEAD</span>;\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n    \n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">newState</span>(<span class=\"hljs-params\">bytes arg</span>) : bytes {\n        <span class=\"hljs-comment\">/*\n          Current pattern            111    110    101    100    011    010    001    000\n          New state for center cell     0     1     1    0     1     1     1     0\n        */</span>\n        bytes a = arg[<span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>];\n        bytes b = arg[<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>];\n        bytes c = arg[<span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">3</span>];\n        bytes res = <span class=\"hljs-variable constant_\">LIVE</span>;\n        <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-variable constant_\">LIVE</span> &amp;&amp; b == <span class=\"hljs-variable constant_\">LIVE</span> &amp;&amp; c == <span class=\"hljs-variable constant_\">LIVE</span>) {\n            res = <span class=\"hljs-variable constant_\">DEAD</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-variable constant_\">LIVE</span> &amp;&amp; b == <span class=\"hljs-variable constant_\">DEAD</span> &amp;&amp; c == <span class=\"hljs-variable constant_\">DEAD</span>) {\n            res = <span class=\"hljs-variable constant_\">DEAD</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-variable constant_\">DEAD</span> &amp;&amp; b == <span class=\"hljs-variable constant_\">DEAD</span> &amp;&amp; c == <span class=\"hljs-variable constant_\">DEAD</span>) {\n            res = <span class=\"hljs-variable constant_\">DEAD</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">propagateState</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, int value</span>) : bool {\n        <span class=\"hljs-title class_\">SigHashType</span> sigHashType = <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">ANYONECANPAY</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">SINGLE</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">FORKID</span>;\n        <span class=\"hljs-comment\">// this ensures the preimage is for the current tx</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimageSigHashType</span>(txPreimage, sigHashType));\n        bytes outputScript = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getStateScript</span>();\n        bytes output = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(outputScript, value);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hash256</span>(output) == <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">hashOutputs</span>(txPreimage);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Schnoor Signatures\"\nexport const description = \"Schnoor Signatures in sCrypt\"\n\nconst html = `<p>The <a href=\"https://en.wikipedia.org/wiki/Schnorr_signature\">Schnorr signature algorithm</a> is an alternative algorithm to the ECDSA algorithm currently used for signatures in Bitcoin. One key advantage is that multiple signatures, either in one input or multiple inputs of the same transaction, can be aggregated into a single signature.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"ec.scrypt\"</span>;\n\n\n<span class=\"hljs-comment\">// Schnorr signatures verification for secp256k1</span>\ncontract <span class=\"hljs-title class_\">Schnorr</span> {\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">verify</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey, bytes msg, int lambda,\n        Point R, PointMulAux rAux,\n        Point E, PointMulAux eAux,\n        Point S, PointMulAux sAux</span>) {\n\n        int r = <span class=\"hljs-title function_\">unpack</span>(sig[ : <span class=\"hljs-number\">32</span>]);\n        int s = <span class=\"hljs-title function_\">unpack</span>(sig[<span class=\"hljs-number\">32</span> : <span class=\"hljs-number\">64</span>]);\n\n        <span class=\"hljs-comment\">// R = r * G</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-title function_\">isMul</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-property\">G</span>, r, R, rAux));\n\n        <span class=\"hljs-comment\">// e = Hash(r || P || msg)</span>\n        int e = <span class=\"hljs-title function_\">unpack</span>(<span class=\"hljs-title function_\">sha256</span>(<span class=\"hljs-title function_\">pack</span>(r) + pubKey + msg));\n\n        <span class=\"hljs-comment\">// E = e * P</span>\n        <span class=\"hljs-title class_\">Point</span> P = <span class=\"hljs-title function_\">pubKey2Point</span>(pubKey);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-title function_\">isMul</span>(P, e, E, eAux));\n\n        <span class=\"hljs-comment\">// S = s * G</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-title function_\">isMul</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-property\">G</span>, s, S, sAux));\n\n        <span class=\"hljs-comment\">// S == R + H?</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-title function_\">isSum</span>(R, E, lambda, S));\n    }\n\n    <span class=\"hljs-comment\">// convert public key to a point, assuming it&#x27;s uncompressed</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pubKey2Point</span>(<span class=\"hljs-params\">PubKey pubKey</span>) : <span class=\"hljs-title class_\">Point</span> {\n        <span class=\"hljs-built_in\">require</span>(pubKey[: <span class=\"hljs-number\">1</span>] == b<span class=\"hljs-string\">&#x27;04&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-title function_\">unpack</span>(pubKey[<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">33</span>]), <span class=\"hljs-title function_\">unpack</span>(pubKey[<span class=\"hljs-number\">33</span> : <span class=\"hljs-number\">65</span>]) };\n    }\n\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Scoping\"\nexport const description = \"Scoping in sCrypt\"\n\nconst html = `<p>Scoping in sCrypt follows the prevailing scoping rules of C99 and Solidity. Outer scope variable is shadowed by the inner scope variable of the same name.</p>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Stateful Contract\"\nexport const description = \"Stateful contracts in sCrypt\"\n\nconst html = `<p>Declare any property that is part of the state with <code>@state</code> decorator. The state property can be used the same way as a regular property.</p>\n<p>In order to presist the state, we need to enforce it in the output of the transaction, that will spend our contract in the future. To achieve that, the spending transaction must pass it&#39;s transaction preimage.</p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">Counter</span> {\n\n    @state\n    int counter;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">increment</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, int amount</span>) {\n        <span class=\"hljs-comment\">// Increment counter value.</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>++;\n\n        <span class=\"hljs-comment\">// Ensure next output contains script with updated counter value.</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">propagateState</span>(txPreimage, amount));\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">propagateState</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, int amount</span>) : bool {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimage</span>(txPreimage));\n        bytes outputScript = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getStateScript</span>();\n        bytes output = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(outputScript, amount);\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title function_\">hash256</span>(output) == <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">hashOutputs</span>(txPreimage));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Static Properties and Functions\"\nexport const description = \"Static properties and functions in sCrypt\"\n\nconst html = `<p>A static property/function can be referenced with contract name as prefix without an instantiated contract, similar to a static function/property in Javascript or C++. A static property/function can also be referenced without the contract prefix, but only in the contract it is defined in.</p>\n<pre><code class=\"language-javascript\">library <span class=\"hljs-title class_\">Foo</span> {\n    <span class=\"hljs-keyword\">static</span> int N = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">incByN</span>(<span class=\"hljs-params\">int a</span>): int {\n        <span class=\"hljs-comment\">// N is used with and without Foo prefix</span>\n        <span class=\"hljs-keyword\">return</span> a + <span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\">N</span> + N;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">double</span>(<span class=\"hljs-params\">int x</span>): int {\n        <span class=\"hljs-comment\">// incByN() is called with prefix and without</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-title function_\">incByN</span>(x) + <span class=\"hljs-title function_\">incByN</span>(x);\n    }\n}\n\ncontract <span class=\"hljs-title class_\">Bar</span> {\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unlock</span>(<span class=\"hljs-params\">int y</span>) {\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-title function_\">double</span>(<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">require</span>(y == <span class=\"hljs-title class_\">Foo</span>.<span class=\"hljs-property\">N</span>);\n        <span class=\"hljs-comment\">// N cannot be referenced without Foo prefix</span>\n        <span class=\"hljs-comment\">// require(y == N);</span>\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Struct Types\"\nexport const description = \"Struct types in sCrypt\"\n\nconst html = `<p>A struct is a collection of variable under a single name.</p>\n<p>Structs can be defined like the following:</p>\n<pre><code class=\"language-javascript\">struct <span class=\"hljs-title class_\">Point</span> {\n  int x;\n  int y;\n}\n\nstruct <span class=\"hljs-title class_\">Line</span> {\n  <span class=\"hljs-title class_\">Point</span> start;\n  <span class=\"hljs-title class_\">Point</span> end;\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-title class_\">Point</span> p = {<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">10</span>};\nint x = p.<span class=\"hljs-property\">x</span>;\np.<span class=\"hljs-property\">y</span> = <span class=\"hljs-number\">20</span>;\n\n<span class=\"hljs-comment\">// Define a variable q of type Point, and set members to the same values as those of p</span>\n<span class=\"hljs-title class_\">Point</span> q = p;\n<span class=\"hljs-built_in\">require</span>(p == q); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-title class_\">Line</span> l = {p, q};\nl.<span class=\"hljs-property\">start</span>.<span class=\"hljs-property\">x</span> = l.<span class=\"hljs-property\">end</span>.<span class=\"hljs-property\">y</span> + <span class=\"hljs-number\">1</span>;\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Tic-Tac-Toe\"\nexport const description = \"Tic-Tac-Toe in sCrypt\"\n\nconst html = `<p>To initiate a game, Alice and Bob each lock up X amount of bitcoins into a contract UTXO. They take turns to play the game by sending signed transactions interacting with the <a href=\"https://by-example.scrypt.io/stateful-contract/\">stateful contract</a>. If one of them wins, the winner claims the 2X bitcoins. If there is a draw, they take back their bitcoins. </p>\n<pre><code class=\"language-javascript\">contract <span class=\"hljs-title class_\">TicTacToe</span> {\n    <span class=\"hljs-title class_\">PubKey</span> alice;\n    <span class=\"hljs-title class_\">PubKey</span> bob;\n\n    <span class=\"hljs-comment\">//Represents whether it is alice&#x27;s turn to play chess</span>\n    @state\n    bool is_alice_turn;\n\n    <span class=\"hljs-comment\">//Represents the position of the chessboard. For example, a chess piece with alice in the first row </span>\n    <span class=\"hljs-comment\">//and first column is expressed as [1,0,0,0,0,0,0,0,0]</span>\n    @state\n    int[<span class=\"hljs-number\">9</span>] board;\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">TURNLEN</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">BOARDLEN</span> = <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">EMPTY</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">ALICE</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int <span class=\"hljs-variable constant_\">BOB</span> = <span class=\"hljs-number\">2</span>;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">move</span>(<span class=\"hljs-params\">int n, Sig sig, int amount, SigHashPreimage txPreimage</span>) {\n        <span class=\"hljs-built_in\">require</span>(n &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; n &lt; <span class=\"hljs-variable constant_\">BOARDLEN</span>);\n\n        <span class=\"hljs-comment\">// not filled</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[n] == <span class=\"hljs-variable constant_\">EMPTY</span>);\n\n        int play = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">is_alice_turn</span> ? <span class=\"hljs-variable constant_\">ALICE</span> : <span class=\"hljs-variable constant_\">BOB</span>;\n        <span class=\"hljs-title class_\">PubKey</span> player = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">is_alice_turn</span> ? <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">alice</span> : <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bob</span>;\n\n        <span class=\"hljs-comment\">// ensure it&#x27;s player&#x27;s turn</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, player));\n        <span class=\"hljs-comment\">// make the move</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[n] = play;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">is_alice_turn</span> = !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">is_alice_turn</span>;\n\n        bytes outputs = b<span class=\"hljs-string\">&#x27;&#x27;</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">won</span>(play)) {\n            bytes outputScript = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildPublicKeyHashScript</span>(<span class=\"hljs-title function_\">hash160</span>(player));\n            bytes output = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(outputScript, amount);\n            outputs = output;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">full</span>()) {\n            bytes aliceScript = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildPublicKeyHashScript</span>(<span class=\"hljs-title function_\">hash160</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">alice</span>));\n            bytes aliceOutput = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(aliceScript, amount);\n\n            bytes bobScript = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildPublicKeyHashScript</span>(<span class=\"hljs-title function_\">hash160</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">bob</span>));\n            bytes bobOutput = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(bobScript, amount);\n\n            outputs = aliceOutput + bobOutput;\n        }\n        <span class=\"hljs-keyword\">else</span> {\n            bytes scriptCode_ = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getStateScript</span>();\n            bytes output = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(scriptCode_, amount);\n            outputs = output;\n        }\n\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">propagateState</span>(txPreimage, outputs));\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">won</span>(<span class=\"hljs-params\">int play</span>) : bool {\n\n        int[<span class=\"hljs-number\">8</span>][<span class=\"hljs-number\">3</span>] lines = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>]];\n\n        bool anyLine = <span class=\"hljs-literal\">false</span>;\n        loop (<span class=\"hljs-number\">8</span>) : i {\n            bool line = <span class=\"hljs-literal\">true</span>;\n            loop (<span class=\"hljs-number\">3</span>) : j {\n                line = line &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[lines[i][j]] == play;\n            }\n\n            anyLine = anyLine || line;\n        }\n\n        <span class=\"hljs-keyword\">return</span> anyLine;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">full</span>(<span class=\"hljs-params\"></span>) : bool {\n        bool full = <span class=\"hljs-literal\">true</span>;\n\n        loop (<span class=\"hljs-variable constant_\">BOARDLEN</span>) : i {\n            full = full &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[i] != <span class=\"hljs-title class_\">TicTacToe</span>.<span class=\"hljs-property\">EMPTY</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> full;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">propagateState</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, bytes outputs</span>) : bool {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimage</span>(txPreimage));\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title function_\">hash256</span>(outputs) == <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">hashOutputs</span>(txPreimage));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Turing Machine\"\nexport const description = \"Turing Machine in sCrypt\"\n\nconst html = `<p>In the example below, we implement a Turing machine for <a href=\"https://math.stackexchange.com/questions/503853/how-do-you-argue-or-prove-that-a-certain-turing-machine-accepts-a-language\">checking balanced parentheses</a>. Its initial state is A and it contains one accepted state. The transition function says, for instance, if the machine is at state A and its head reads symbol “)”, it should write “X” in that cell and move left, transitioning to state B.</p>\n<p>Structs can be defined like the following:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"serializer.scrypt\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"arrayUtil.scrypt\"</span>;\n\n<span class=\"hljs-comment\">// Turing machine state</span>\ntype <span class=\"hljs-title class_\">State</span> = bytes;\n<span class=\"hljs-comment\">// alphabet symbol in each cell, 1 byte long each</span>\ntype <span class=\"hljs-title class_\">Symbol</span> = bytes;\n\n<span class=\"hljs-comment\">// contract state as a struct</span>\nstruct <span class=\"hljs-title class_\">StateStruct</span> {\n    int headPos;\n    bytes tape;\n    <span class=\"hljs-comment\">// current machine state</span>\n    <span class=\"hljs-title class_\">State</span> curState;\n}\n\nstruct <span class=\"hljs-title class_\">Input</span> {\n    <span class=\"hljs-title class_\">State</span> oldState;\n    <span class=\"hljs-title class_\">Symbol</span> read;\n}\n\nstruct <span class=\"hljs-title class_\">Output</span> {\n    <span class=\"hljs-title class_\">State</span> newState;\n    <span class=\"hljs-title class_\">Symbol</span> write;\n    <span class=\"hljs-comment\">// move left or right</span>\n    bool moveLeft;\n}\n\n<span class=\"hljs-comment\">// transition function entry: input -&gt; output</span>\nstruct <span class=\"hljs-title class_\">TransitionFuncEntry</span> {\n    <span class=\"hljs-title class_\">Input</span> input;\n    <span class=\"hljs-title class_\">Output</span> output;\n}\n\n<span class=\"hljs-comment\">/*\n * A Turing Machine checking balanced parentheses\n */</span>\ncontract <span class=\"hljs-title class_\">TuringMachine</span> {\n\n    @state\n    <span class=\"hljs-title class_\">StateStruct</span> states;\n    <span class=\"hljs-comment\">// states</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">State</span> <span class=\"hljs-variable constant_\">STATE_A</span> = b<span class=\"hljs-string\">&#x27;00&#x27;</span>; <span class=\"hljs-comment\">// initial state</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">State</span> <span class=\"hljs-variable constant_\">STATE_B</span> = b<span class=\"hljs-string\">&#x27;01&#x27;</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">State</span> <span class=\"hljs-variable constant_\">STATE_C</span> = b<span class=\"hljs-string\">&#x27;02&#x27;</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">State</span> <span class=\"hljs-variable constant_\">STATE_ACCEPT</span> = b<span class=\"hljs-string\">&#x27;03&#x27;</span>;\n\n    <span class=\"hljs-comment\">// symbols</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Symbol</span> <span class=\"hljs-variable constant_\">BLANK</span> = b<span class=\"hljs-string\">&#x27;00&#x27;</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Symbol</span> <span class=\"hljs-variable constant_\">OPEN</span> = b<span class=\"hljs-string\">&#x27;01&#x27;</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Symbol</span> <span class=\"hljs-variable constant_\">CLOSE</span> = b<span class=\"hljs-string\">&#x27;02&#x27;</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Symbol</span> X = b<span class=\"hljs-string\">&#x27;03&#x27;</span>;\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> bool <span class=\"hljs-variable constant_\">LEFT</span> = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> bool <span class=\"hljs-variable constant_\">RIGHT</span> = <span class=\"hljs-literal\">false</span>;\n\n    <span class=\"hljs-comment\">// number of rules in the transition function</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> int N = <span class=\"hljs-number\">8</span>;\n    <span class=\"hljs-comment\">// transition function table</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TransitionFuncEntry</span>[N] transitionFuncTable = [\n        ,\n        ,\n        ,\n        ,\n        \n        ,\n        ,\n\n        ,\n        \n    ];\n    \n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">transit</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage</span>) {\n        <span class=\"hljs-comment\">// transition</span>\n        <span class=\"hljs-title class_\">Symbol</span> head = <span class=\"hljs-title class_\">ArrayUtil</span>.<span class=\"hljs-title function_\">getElemAt</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">headPos</span>);\n        <span class=\"hljs-comment\">// look up in transition table</span>\n        bool found = <span class=\"hljs-literal\">false</span>;\n        loop (N) : i {\n            <span class=\"hljs-keyword\">if</span> (!found) {\n                auto entry = transitionFuncTable[i];\n                <span class=\"hljs-keyword\">if</span> (entry.<span class=\"hljs-property\">input</span> == { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">curState</span>, head }) {\n                    auto output = entry.<span class=\"hljs-property\">output</span>;\n                    <span class=\"hljs-comment\">// update state</span>\n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">curState</span> = output.<span class=\"hljs-property\">newState</span>;\n                    <span class=\"hljs-comment\">// write tape head</span>\n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span> = <span class=\"hljs-title class_\">ArrayUtil</span>.<span class=\"hljs-title function_\">setElemAt</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">headPos</span>, output.<span class=\"hljs-property\">write</span>);\n                    <span class=\"hljs-comment\">// move head</span>\n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">headPos</span> += output.<span class=\"hljs-property\">moveLeft</span> ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n                    <span class=\"hljs-comment\">// extend tape if out of bound</span>\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">headPos</span> &lt; <span class=\"hljs-number\">0</span>) {\n                        <span class=\"hljs-comment\">// add 1 blank cell to the left</span>\n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span> = <span class=\"hljs-variable constant_\">BLANK</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span>;\n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">headPos</span> = <span class=\"hljs-number\">0</span>;\n                    }\n                    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">headPos</span> &gt;= <span class=\"hljs-title function_\">len</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span>)) {\n                        <span class=\"hljs-comment\">// add 1 blank cell to the right</span>\n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">tape</span> + <span class=\"hljs-variable constant_\">BLANK</span>;\n                    }\n\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">states</span>.<span class=\"hljs-property\">curState</span> == <span class=\"hljs-variable constant_\">STATE_ACCEPT</span>) {\n                        <span class=\"hljs-comment\">// accept</span>\n                        <span class=\"hljs-title function_\">exit</span>(<span class=\"hljs-literal\">true</span>);\n                    }\n\n                    found = <span class=\"hljs-literal\">true</span>;\n                }\n            }\n        }\n        <span class=\"hljs-comment\">// reject if no transition rule found</span>\n        <span class=\"hljs-built_in\">require</span>(found);\n\n        <span class=\"hljs-comment\">// otherwise machine goes to the next step</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">propagateState</span>(txPreimage, <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">value</span>(txPreimage)));\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">propagateState</span>(<span class=\"hljs-params\">SigHashPreimage txPreimage, int value</span>) : bool {\n        <span class=\"hljs-title class_\">SigHashType</span> sigHashType = <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">ANYONECANPAY</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">SINGLE</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">FORKID</span>;\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimageSigHashType</span>(txPreimage, sigHashType));\n        bytes outputScript = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getStateScript</span>();\n        bytes output = <span class=\"hljs-title class_\">Utils</span>.<span class=\"hljs-title function_\">buildOutput</span>(outputScript, value);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">hash256</span>(output) == <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-title function_\">hashOutputs</span>(txPreimage);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Type Aliases\"\nexport const description = \"Type aliases in sCrypt\"\n\nconst html = `<p>Type aliases create a new name for a type. It does not actually create a new type, it merely creates a new name to refer to that type.</p>\n<pre><code class=\"language-javascript\">type <span class=\"hljs-title class_\">Age</span> = int;\ntype <span class=\"hljs-title class_\">Coordinate</span> = int[<span class=\"hljs-number\">2</span>];\n</code></pre>\n<p>They can also be used for struct types.</p>\n<p>Struct definition:</p>\n<pre><code class=\"language-javascript\">struct <span class=\"hljs-title class_\">Point</span> {\n  int x;\n  int y;\n}\n</code></pre>\n<p>Creating an alias for the defined struct:</p>\n<pre><code class=\"language-javascript\">type <span class=\"hljs-title class_\">Coordinate</span> = <span class=\"hljs-title class_\">Point</span>;\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Type Inference\"\nexport const description = \"Type inference in sCrypt\"\n\nconst html = `<p>The <code>auto</code> keyword specifies that the type of the variable, of basic type, declared will be automatically deducted from its initializer.</p>\n<pre><code class=\"language-javascript\">auto a1 = b<span class=\"hljs-string\">&#x27;36&#x27;</span>;      <span class=\"hljs-comment\">// bytes</span>\nauto a2 = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">// int</span>\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.1.0\"\nexport const title = \"Outsourcing Vanity Address Generation\"\nexport const description = \"Outsourcing vanity address generation in sCrypt\"\n\nconst html = `<p>In order to outsource the generation of a desired vanity address, say with the prefix <code>1Love</code>, we generate a key pair <strong>p</strong>, <strong>P</strong>.\nWe then share <strong>P</strong> with the seller, who will find the public key of our final vanity address. He will then go through many values of a partial private key <strong>x</strong>, until <strong>P + x*G</strong> yields a public key <strong>P&#39;</strong>, the address of which will contain our desired prefix. He then shares this key <em>x</em>, so we can assemble the private key of <strong>P&#39;</strong>, by calculating <strong>k = (p + x) * G</strong>.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"ec.scrypt\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"util.scrypt\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"base58.scrypt\"</span>;\n\n\ncontract <span class=\"hljs-title class_\">VanityAddr</span> {\n\n    <span class=\"hljs-title class_\">PubKey</span> P;\n    bytes pattern;\n    <span class=\"hljs-title class_\">Ripemd160</span> cancelPubKeyHash;\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">cancel</span>(<span class=\"hljs-params\">Sig sig, PubKey pubKey</span>) {\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">hash160</span>(pubKey) == <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cancelPubKeyHash</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">checkSig</span>(sig, pubKey));\n    }\n\n    public <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">offerVanityAddr</span>(<span class=\"hljs-params\">PrivKey x,\n                                    PubKey X,\n                                    PubKey derP,\n                                    int lambda,\n                                    SigHashPreimage txPreimage</span>) {\n        <span class=\"hljs-comment\">// Check if x is private key of X.</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-title function_\">checkPreimageAdvanced</span>(txPreimage, x, X, <span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-property\">invK</span>, <span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-property\">r</span>, <span class=\"hljs-title class_\">Tx</span>.<span class=\"hljs-property\">rBigEndian</span>, <span class=\"hljs-title class_\">SigHashType</span>(<span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">ALL</span> | <span class=\"hljs-title class_\">SigHash</span>.<span class=\"hljs-property\">FORKID</span>)));\n\n        <span class=\"hljs-comment\">// Check if P&#x27; = P + X.</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-variable constant_\">EC</span>.<span class=\"hljs-title function_\">isPubKeySum</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">P</span>, X, lambda, derivedPubKey));\n\n        <span class=\"hljs-comment\">// Check if P&#x27; produces desired address.</span>\n        <span class=\"hljs-title class_\">PubKey</span> derivedPubKeyCompressed = <span class=\"hljs-title function_\">compressPubKey</span>(derivedPubKey);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-title function_\">matchPattern</span>(derivedPubKeyCompressed, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pattern</span>));\n    }\n\n    <span class=\"hljs-comment\">// Check if public key&#x27;s address matches the given pattern.</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">matchPattern</span>(<span class=\"hljs-params\">PubKey pubKey, bytes pattern</span>) : bool {\n        <span class=\"hljs-comment\">// Derive the address.</span>\n        bytes addr = <span class=\"hljs-title function_\">hash160</span>(pubKey);\n\n        <span class=\"hljs-comment\">// Encode to base58check.</span>\n        bytes addrB58 = <span class=\"hljs-title class_\">Base58</span>.<span class=\"hljs-title function_\">base58EncodeCheckAddr</span>(addr, <span class=\"hljs-title class_\">Base58</span>.<span class=\"hljs-property\">P2PKH_verbyte_mainnet</span>);\n\n        <span class=\"hljs-comment\">// Prefix match.</span>\n        int l = <span class=\"hljs-title function_\">len</span>(pattern);\n        <span class=\"hljs-keyword\">return</span> addrB58[:l] == pattern;\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compressPubKey</span>(<span class=\"hljs-params\">PubKey pk</span>) : <span class=\"hljs-title class_\">PubKey</span> {\n        <span class=\"hljs-comment\">// Check if y-coord is even or odd</span>\n        bool isEven = (pk[<span class=\"hljs-number\">63</span>:<span class=\"hljs-number\">64</span>] &amp; b<span class=\"hljs-string\">&#x27;01&#x27;</span>) != b<span class=\"hljs-string\">&#x27;01&#x27;</span>;\n\n        bytes prefix = isEven ? b<span class=\"hljs-string\">&#x27;02&#x27;</span> : b<span class=\"hljs-string\">&#x27;03&#x27;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">PubKey</span>(prefix + pk[<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">33</span>]);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","export default __webpack_public_path__ + \"static/media/youtube.350d8f8f.svg\";","import React from \"react\"\nimport SEO from \"../components/SEO\"\nimport styles from \"./index.module.css\"\nimport youTube from \"../components/youtube.svg\"\n\ninterface Route {\n  path: string\n  title: string\n}\n\nconst SOL_ROUTES: Route[] = [\n  {\n    path: \"hello-world\",\n    title: \"Hello World\",\n  },\n  {\n    path: \"constructor\",\n    title: \"Constructor\",\n  },\n  {\n    path: \"require\",\n    title: \"Require\",\n  },\n  {\n    path: \"basic-types\",\n    title: \"Basic Types\",\n  },\n  {\n    path: \"array-types\",\n    title: \"Array Types\",\n  },\n  {\n    path: \"struct-types\",\n    title: \"Struct Types\",\n  },\n  {\n    path: \"type-inference\",\n    title: \"Type Inference\",\n  },\n  {\n    path: \"type-aliases\",\n    title: \"Type Aliases\",\n  },\n  {\n    path: \"generics\",\n    title: \"Generics\",\n  },\n  {\n    path: \"const-variables\",\n    title: \"Const Variables\",\n  },\n  {\n    path: \"if-else\",\n    title: \"If / Else\",\n  },\n  {\n    path: \"public-function\",\n    title: \"Public Function\",\n  },\n  {\n    path: \"contract-private-functions\",\n    title: \"Functions\",\n  },\n  {\n    path: \"exit\",\n    title: \"Exit\",\n  },\n  //{\n  //  path: \"code-seperator\",\n  //  title: \"Code seperator\",\n  //},\n  {\n    path: \"access-modifiers\",\n    title: \"Access Modifiers\",\n  },\n  {\n    path: \"operators\",\n    title: \"Operators\",\n  },\n  {\n    path: \"scoping\",\n    title: \"Scoping\",\n  },\n  {\n    path: \"static\",\n    title: \"Static\",\n  },\n  {\n    path: \"loop\",\n    title: \"Loop\",\n  },\n  {\n    path: \"library\",\n    title: \"Library\",\n  },\n  {\n    path: \"import\",\n    title: \"Import\",\n  },\n  {\n    path: \"stateful-contract\",\n    title: \"Stateful Contract\",\n  },\n  {\n    path: \"inline-assembly\",\n    title: \"Inline Assembly\",\n  },\n]\n\nconst APP_ROUTES: Route[] = [\n  {\n    path: \"p2pkh\",\n    title: \"Pay to Public Key Hash (P2PKH)\",\n  },\n  {\n    path: \"r-puzzle\",\n    title: \"R-Puzzle\",\n  },\n  {\n    path: \"rabin-signature\",\n    title: \"Rabin Signature\",\n  },\n  {\n    path: \"schnoor-signature\",\n    title: \"Schnoor Signatures\",\n  },\n  {\n    path: \"multiparty-hash-puzzles\",\n    title: \"Multiparty Hash Puzzles\",\n  },\n  {\n    path: \"ecdsa-oracles\",\n    title: \"ECDSA-based Oracles\",\n  },\n  {\n    path: \"vanity-address\",\n    title: \"Trustless Outsourced Vanity Address Generation\",\n  },\n  {\n    path: \"auction\",\n    title: \"Auctions\",\n  },\n  {\n    path: \"cointoss\",\n    title: \"Fair Coin Toss\",\n  },\n  {\n    path: \"tic-tac-toe\",\n    title: \"Tic-Tac-Toe\",\n  },\n  {\n    path: \"rule110\",\n    title: \"Rule 110\",\n  },\n  {\n    path: \"gol\",\n    title: \"Conways Game of Life\",\n  },\n  {\n    path: \"turing-machine\",\n    title: \"Turing Machine\",\n  },\n]\n\nconst HACK_ROUTES: Route[] = []\n\nconst DEFI_ROUTES = []\n\nexport const ROUTES_BY_CATEGORY = [\n  {\n    title: \"\",\n    routes: SOL_ROUTES,\n  },\n  {\n    title: \"Applications\",\n    routes: APP_ROUTES,\n    //routes: APP_ROUTES.map((route) => ({\n    //  ...route,\n    //  path: `/app/${route.path}`,\n    //})),\n  },\n  //{\n  //  title: \"Hacks\",\n  //  routes: HACK_ROUTES.map((route) => ({\n  //    ...route,\n  //    path: `/hacks/${route.path}`,\n  //  })),\n  //},\n  //{\n  //  title: \"DeFi\",\n  //  routes: DEFI_ROUTES.map((route) => ({\n  //    ...route,\n  //    path: `/defi/${route.path}`,\n  //  })),\n  //},\n]\n\nconst UPDATES = [\n  \"\",\n]\n\nfunction HomePage() {\n  return (\n    <div className={styles.component}>\n      <SEO\n        title=\"sCrypt by Example\"\n        description=\"Learn smart contract programming using sCrypt\"\n      />\n      <h1 className={styles.header}>\n        <a href=\"/\">sCrypt by Example</a>\n      </h1>\n      <div className={styles.subHeader}></div>\n      <div className={styles.main}>\n        <p>\n          An introduction to <a href=\"https://scrypt.io/\">sCrypt</a> with\n          simple examples.\n        </p>\n\n        <div className={styles.youTube}>\n          <img src={youTube} alt=\"logo\" className={styles.youTubeLogo} />\n          <a\n            href=\"https://www.youtube.com/watch?v=xPfCM6gBl-Y&list=PL0Kn1t30VSpG4Fu2ze81uDptBd1ZML99A\"\n            target=\"__blank\"\n          >\n            Learning sCrypt video playlist.\n          </a>\n        </div>\n\n        <div className={styles.updates}>\n          {UPDATES.map((text, i) => (\n            <div key={i}>{text}</div>\n          ))}\n        </div>\n\n        {ROUTES_BY_CATEGORY.map(({ routes, title }, i) => (\n          <div key={i}>\n            {title && <h3 className={styles.category}>{title}</h3>}\n\n            <ul className={styles.list}>\n              {routes.map(({ path, title }) => (\n                <li className={styles.listItem} key={path}>\n                  <a href={path}>{title}</a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default HomePage\n","import component_access_modifiers from \"./pages/access-modifiers\"\nimport component_array_types from \"./pages/array-types\"\nimport component_auction from \"./pages/auction\"\nimport component_basic_types from \"./pages/basic-types\"\nimport component_code_seperator from \"./pages/code-seperator\"\nimport component_cointoss from \"./pages/cointoss\"\nimport component_const_variables from \"./pages/const-variables\"\nimport component_constructor from \"./pages/constructor\"\nimport component_contract_private_functions from \"./pages/contract-private-functions\"\nimport component_ecdsa_oracles from \"./pages/ecdsa-oracles\"\nimport component_exit from \"./pages/exit\"\nimport component_generics from \"./pages/generics\"\nimport component_gol from \"./pages/gol\"\nimport component_hello_world from \"./pages/hello-world\"\nimport component_if_else from \"./pages/if-else\"\nimport component_import from \"./pages/import\"\nimport component_inline_assembly from \"./pages/inline-assembly\"\nimport component_library from \"./pages/library\"\nimport component_loop from \"./pages/loop\"\nimport component_multiparty_hash_puzzles from \"./pages/multiparty-hash-puzzles\"\nimport component_operators from \"./pages/operators\"\nimport component_p2pkh from \"./pages/p2pkh\"\nimport component_public_function from \"./pages/public-function\"\nimport component_r_puzzle from \"./pages/r-puzzle\"\nimport component_rabin_signature from \"./pages/rabin-signature\"\nimport component_require from \"./pages/require\"\nimport component_rule110 from \"./pages/rule110\"\nimport component_schnoor_signature from \"./pages/schnoor-signature\"\nimport component_scoping from \"./pages/scoping\"\nimport component_stateful_contract from \"./pages/stateful-contract\"\nimport component_static from \"./pages/static\"\nimport component_struct_types from \"./pages/struct-types\"\nimport component_tic_tac_toe from \"./pages/tic-tac-toe\"\nimport component_turing_machine from \"./pages/turing-machine\"\nimport component_type_aliases from \"./pages/type-aliases\"\nimport component_type_inference from \"./pages/type-inference\"\nimport component_vanity_address from \"./pages/vanity-address\"\nimport component_ from \"./pages\"\n\ninterface Route {\n  path: string\n  component: () => JSX.Element\n  breakingChanges?: boolean\n}\n\nconst routes: Route[] = [\n    {\n        path: \"/access-modifiers\",\n        component: component_access_modifiers\n    },\n    {\n        path: \"/array-types\",\n        component: component_array_types\n    },\n    {\n        path: \"/auction\",\n        component: component_auction\n    },\n    {\n        path: \"/basic-types\",\n        component: component_basic_types\n    },\n    {\n        path: \"/code-seperator\",\n        component: component_code_seperator\n    },\n    {\n        path: \"/cointoss\",\n        component: component_cointoss\n    },\n    {\n        path: \"/const-variables\",\n        component: component_const_variables\n    },\n    {\n        path: \"/constructor\",\n        component: component_constructor\n    },\n    {\n        path: \"/contract-private-functions\",\n        component: component_contract_private_functions\n    },\n    {\n        path: \"/ecdsa-oracles\",\n        component: component_ecdsa_oracles\n    },\n    {\n        path: \"/exit\",\n        component: component_exit\n    },\n    {\n        path: \"/generics\",\n        component: component_generics\n    },\n    {\n        path: \"/gol\",\n        component: component_gol\n    },\n    {\n        path: \"/hello-world\",\n        component: component_hello_world\n    },\n    {\n        path: \"/if-else\",\n        component: component_if_else\n    },\n    {\n        path: \"/import\",\n        component: component_import\n    },\n    {\n        path: \"/inline-assembly\",\n        component: component_inline_assembly\n    },\n    {\n        path: \"/library\",\n        component: component_library\n    },\n    {\n        path: \"/loop\",\n        component: component_loop\n    },\n    {\n        path: \"/multiparty-hash-puzzles\",\n        component: component_multiparty_hash_puzzles\n    },\n    {\n        path: \"/operators\",\n        component: component_operators\n    },\n    {\n        path: \"/p2pkh\",\n        component: component_p2pkh\n    },\n    {\n        path: \"/public-function\",\n        component: component_public_function\n    },\n    {\n        path: \"/r-puzzle\",\n        component: component_r_puzzle\n    },\n    {\n        path: \"/rabin-signature\",\n        component: component_rabin_signature\n    },\n    {\n        path: \"/require\",\n        component: component_require\n    },\n    {\n        path: \"/rule110\",\n        component: component_rule110\n    },\n    {\n        path: \"/schnoor-signature\",\n        component: component_schnoor_signature\n    },\n    {\n        path: \"/scoping\",\n        component: component_scoping\n    },\n    {\n        path: \"/stateful-contract\",\n        component: component_stateful_contract\n    },\n    {\n        path: \"/static\",\n        component: component_static\n    },\n    {\n        path: \"/struct-types\",\n        component: component_struct_types\n    },\n    {\n        path: \"/tic-tac-toe\",\n        component: component_tic_tac_toe\n    },\n    {\n        path: \"/turing-machine\",\n        component: component_turing_machine\n    },\n    {\n        path: \"/type-aliases\",\n        component: component_type_aliases\n    },\n    {\n        path: \"/type-inference\",\n        component: component_type_inference\n    },\n    {\n        path: \"/vanity-address\",\n        component: component_vanity_address\n    },\n    {\n        path: \"\",\n        component: component_\n    },\n]\n\nexport default routes","import React, { useEffect } from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport { useAppContext } from \"./contexts/AppContext\"\nimport styles from \"./App.module.css\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport routes from \"./routes\"\n\nfunction App() {\n  const { state, loadLocalStorage } = useAppContext()\n\n  useEffect(() => {\n    loadLocalStorage()\n  }, [])\n\n  if (state.loading) {\n    return null\n  }\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className={styles.component}>\n        <Header />\n        <div className={styles.main}>\n          <Switch>\n            {routes.map((route) => (\n              <Route\n                key={route.path}\n                path={route.path}\n                exact\n                component={route.component}\n              />\n            ))}\n          </Switch>\n        </div>\n        <div className={styles.footer}>\n          <Footer />\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport \"./index.css\"\nimport { Provider as AppContextProvider } from \"./contexts/AppContext\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nconst rootElement = document.getElementById(\"root\")\n// @ts-ignore\nif (rootElement.hasChildNodes()) {\n  hydrate(\n    <AppContextProvider>\n      <App />\n    </AppContextProvider>,\n    rootElement\n  )\n} else {\n  render(\n    <AppContextProvider>\n      <App />\n    </AppContextProvider>,\n    rootElement\n  )\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Footer_component__2wm-B\",\"row\":\"Footer_row__3cluQ\",\"bar\":\"Footer_bar__93usQ\",\"khan\":\"Footer_khan__3lTcL\",\"social\":\"Footer_social__2zV0n\",\"scrypt\":\"Footer_scrypt__l_4AP\",\"telegram\":\"Footer_telegram__24TIZ\",\"discord\":\"Footer_discord__3WEtR\",\"youTube\":\"Footer_youTube__aIeLj\",\"slack\":\"Footer_slack__1g_De\",\"github\":\"Footer_github__dwe1R\",\"medium\":\"Footer_medium__3xje4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"pages_component__1bqIE\",\"updates\":\"pages_updates__3xY-4\",\"category\":\"pages_category__4oGsu\",\"listItem\":\"pages_listItem__1RzOh\",\"label\":\"pages_label__i9P1V\",\"header\":\"pages_header__o5uPl\",\"youTube\":\"pages_youTube__3ueeo\",\"youTubeLogo\":\"pages_youTubeLogo__3p01g\"};"],"sourceRoot":""}